{
  "advanced/architecture": {
    "title": "architecture",
    "content": "---\nslug: architecture\ntitle: Architecture\n---\n\nQuartz is a static site generator. How does it work?\n\nThis question is best answered by tracing what happens when a user (you!) runs `npx quartz build` in the command line:\n\n## On the server\n\n1. After running `npx quartz build`, npm will look at `package.json` to find the `bin` entry for `quartz` which points at `./quartz/bootstrap-cli.mjs`.\n2. This file has a [shebang](<https://en.wikipedia.org/wiki/Shebang_(Unix)>) line at the top which tells npm to execute it using Node.\n3. `bootstrap-cli.mjs` is responsible for a few things:\n   1. Parsing the command-line arguments using [yargs](http://yargs.js.org/).\n   2. Transpiling and bundling the rest of Quartz (which is in Typescript) to regular JavaScript using [esbuild](https://esbuild.github.io/). The `esbuild` configuration here is slightly special as it also handles `.scss` file imports using [esbuild-sass-plugin v2](https://www.npmjs.com/package/esbuild-sass-plugin). Additionally, we bundle 'inline' client-side scripts (any `.inline.ts` file) that components declare using a custom `esbuild` plugin that runs another instance of `esbuild` which bundles for the browser instead of `node`. Modules of both types are imported as plain text.\n   3. Running the local preview server if `--serve` is set. This starts two servers:\n      1. A WebSocket server on port 3001 to handle hot-reload signals. This tracks all inbound connections and sends a 'rebuild' message a server-side change is detected (either content or configuration).\n      2. An HTTP file-server on a user defined port (normally 8080) to serve the actual website files.\n   4. If the `--serve` flag is set, it also starts a file watcher to detect source-code changes (e.g. anything that is `.ts`, `.tsx`, `.scss`, or packager files). On a change, we rebuild the module (step 2 above) using esbuild's [rebuild API](https://esbuild.github.io/api/#rebuild) which drastically reduces the build times.\n   5. After transpiling the main Quartz build module (`quartz/build.ts`), we write it to a cache file `.quartz-cache/transpiled-build.mjs` and then dynamically import this using `await import(cacheFile)`. However, we need to be pretty smart about how to bust Node's [import cache](https://github.com/nodejs/modules/issues/307) so we add a random query string to fake Node into thinking it's a new module. This does, however, cause memory leaks so we just hope that the user doesn't hot-reload their configuration too many times in a single session :)) (it leaks about ~350kB memory on each reload). After importing the module, we then invoke it, passing in the command line arguments we parsed earlier along with a callback function to signal the client to refresh.\n4. In `build.ts`, we start by installing source map support manually to account for the query string cache busting hack we introduced earlier. Then, we start processing content:\n   1. Clean the output directory.\n   2. Recursively glob all files in the `content` folder, respecting the `.gitignore`.\n   3. Parse the Markdown files.\n      1. Quartz detects the number of threads available and chooses to spawn worker threads if there are >128 pieces of content to parse (rough heuristic). If it needs to spawn workers, it will invoke esbuild again to transpile the worker script `quartz/worker.ts`. Then, a work-stealing [workerpool](https://www.npmjs.com/package/workerpool) is then created and batches of 128 files are assigned to workers.\n      2. Each worker (or just the main thread if there is no concurrency) creates a [unified](https://github.com/unifiedjs/unified) parser based off of the plugins defined in the [[configuration]].\n      3. Parsing has three steps:\n         1. Read the file into a [vfile](https://github.com/vfile/vfile).\n         2. Applied plugin-defined text transformations over the content.\n         3. Slugify the file path and store it in the data for the file. See the page on [[paths]] for more details about how path logic works in Quartz (spoiler: its complicated).\n         4. Markdown parsing using [remark-parse](https://www.npmjs.com/package/remark-parse) (text to [mdast](https://github.com/syntax-tree/mdast)).\n         5. Apply plugin-defined Markdown-to-Markdown transformations.\n         6. Convert Markdown into HTML using [remark-rehype](https://github.com/remarkjs/remark-rehype) ([mdast](https://github.com/syntax-tree/mdast) to [hast](https://github.com/syntax-tree/hast)).\n         7. Apply plugin-defined HTML-to-HTML transformations.\n   4. Filter out unwanted content using plugins.\n   5. Emit files using plugins.\n      1. Gather all the static resources (e.g. external CSS, JS modules, etc.) each emitter plugin declares.\n      2. Emitters that emit HTML files do a bit of extra work here as they need to transform the [hast](https://github.com/syntax-tree/hast) produced in the parse step to JSX. This is done using [hast-util-to-jsx-runtime](https://github.com/syntax-tree/hast-util-to-jsx-runtime) with the [Preact](https://preactjs.com/) runtime. Finally, the JSX is rendered to HTML using [preact-render-to-string](https://github.com/preactjs/preact-render-to-string) which statically renders the JSX to HTML (i.e. doesn't care about `useState`, `useEffect`, or any other React/Preact interactive bits). Here, we also do a bunch of fun stuff like assemble the page [[layout]] from `quartz.layout.ts`, assemble all the inline scripts that actually get shipped to the client, and all the transpiled styles. The bulk of this logic can be found in `quartz/components/renderPage.tsx`. Other fun things of note:\n         1. CSS is minified and transformed using [Lightning CSS](https://github.com/parcel-bundler/lightningcss) to add vendor prefixes and do syntax lowering.\n         2. Scripts are split into `beforeDOMLoaded` and `afterDOMLoaded` and are inserted in the `<head>` and `<body>` respectively.\n      3. Finally, each emitter plugin is responsible for emitting and writing it's own emitted files to disk.\n   6. If the `--serve` flag was detected, we also set up another file watcher to detect content changes (only `.md` files). We keep a content map that tracks the parsed AST and plugin data for each slug and update this on file changes. Newly added or modified paths are rebuilt and added to the content map. Then, all the filters and emitters are run over the resulting content map. This file watcher is debounced with a threshold of 250ms. On success, we send a client refresh signal using the passed in callback function.\n\n## On the client\n\n1. The browser opens a Quartz page and loads the HTML. The `<head>` also links to page styles (emitted to `public/index.css`) and page-critical JS (emitted to `public/prescript.js`)\n2. Then, once the body is loaded, the browser loads the non-critical JS (emitted to `public/postscript.js`)\n3. Once the page is done loading, the page will then dispatch a custom synthetic browser event `\"nav\"`. This is used so client-side scripts declared by components can 'setup' anything that requires access to the page DOM.\n   1. If the [[SPA Routing|enableSPA option]] is enabled in the [[configuration]], this `\"nav\"` event is also fired on any client-navigation to allow for components to unregister and reregister any event handlers and state.\n   2. If it's not, we wire up the `\"nav\"` event to just be fired a single time after page load to allow for consistency across how state is setup across both SPA and non-SPA contexts.\n\nThe architecture and design of the plugin system was intentionally left pretty vague here as this is described in much more depth in the guide on [[making plugins|making your own plugin]].\n"
  },
  "advanced/creating-components": {
    "title": "creating components",
    "content": "---\nslug: creating-components\ntitle: Creating your own Quartz components\n---\n\n> [!warning]\n> This guide assumes you have experience writing JavaScript and are familiar with TypeScript.\n\nNormally on the web, we write layout code using HTML which looks something like the following:\n\n```html\n<article>\n  <h1>An article header</h1>\n  <p>Some content</p>\n</article>\n```\n\nThis piece of HTML represents an article with a leading header that says \"An article header\" and a paragraph that contains the text \"Some content\". This is combined with CSS to style the page and JavaScript to add interactivity.\n\nHowever, HTML doesn't let you create reusable templates. If you wanted to create a new page, you would need to copy and paste the above snippet and edit the header and content yourself. This isn't great if we have a lot of content on our site that shares a lot of similar layout. The smart people who created React also had similar complaints and invented the concept of Components -- JavaScript functions that return JSX -- to solve the code duplication problem.\n\nIn effect, components allow you to write a JavaScript function that takes some data and produces HTML as an output. **While Quartz doesn't use React, it uses the same component concept to allow you to easily express layout templates in your Quartz site.**\n\n## An Example Component\n\n### Constructor\n\nComponent files are written in `.tsx` files that live in the `quartz/components` folder. These are re-exported in `quartz/components/index.ts` so you can use them in layouts and other components more easily.\n\nEach component file should have a default export that satisfies the `QuartzComponentConstructor` function signature. It's a function that takes in a single optional parameter `opts` and returns a Quartz Component. The type of the parameters `opts` is defined by the interface `Options` which you as the component creator also decide.\n\nIn your component, you can use the values from the configuration option to change the rendering behaviour inside of your component. For example, the component in the code snippet below will not render if the `favouriteNumber` option is below 0.\n\n```tsx {11-17}\ninterface Options {\n  favouriteNumber: number\n}\n\nconst defaultOptions: Options = {\n  favouriteNumber: 42,\n}\n\nexport default ((userOpts?: Options) => {\n  const opts = { ...userOpts, ...defaultOpts }\n  function YourComponent(props: QuartzComponentProps) {\n    if (opts.favouriteNumber < 0) {\n      return null\n    }\n\n    return <p>My favourite number is {opts.favouriteNumber}</p>\n  }\n\n  return YourComponent\n}) satisfies QuartzComponentConstructor\n```\n\n### Props\n\nThe Quartz component itself (lines 11-17 highlighted above) looks like a React component. It takes in properties (sometimes called [props](https://react.dev/learn/passing-props-to-a-component)) and returns JSX.\n\nAll Quartz components accept the same set of props:\n\n```tsx title=\"quartz/components/types.ts\"\n// simplified for sake of demonstration\nexport type QuartzComponentProps = {\n  fileData: QuartzPluginData\n  cfg: GlobalConfiguration\n  tree: Node<QuartzPluginData>\n  allFiles: QuartzPluginData[]\n  displayClass?: \"mobile-only\" | \"desktop-only\"\n}\n```\n\n- `fileData`: Any metadata [[making plugins|plugins]] may have added to the current page.\n  - `fileData.slug`: slug of the current page.\n  - `fileData.frontmatter`: any frontmatter parsed.\n- `cfg`: The `configuration` field in `quartz.config.ts`.\n- `tree`: the resulting [HTML AST](https://github.com/syntax-tree/hast) after processing and transforming the file. This is useful if you'd like to render the content using [hast-util-to-jsx-runtime](https://github.com/syntax-tree/hast-util-to-jsx-runtime) (you can find an example of this in `quartz/components/pages/Content.tsx`).\n- `allFiles`: Metadata for all files that have been parsed. Useful for doing page listings or figuring out the overall site structure.\n- `displayClass`: a utility class that indicates a preference from the user about how to render it in a mobile or desktop setting. Helpful if you want to conditionally hide a component on mobile or desktop.\n\n### Styling\n\nQuartz components can also define a `.css` property on the actual function component which will get picked up by Quartz. This is expected to be a CSS string which can either be inlined or imported from a `.scss` file.\n\nNote that inlined styles **must** be plain vanilla CSS:\n\n```tsx {6-10} title=\"quartz/components/YourComponent.tsx\"\nexport default (() => {\n  function YourComponent() {\n    return <p class=\"red-text\">Example Component</p>\n  }\n\n  YourComponent.css = `\n  p.red-text {\n    color: red;\n  }\n  `\n\n  return YourComponent\n}) satisfies QuartzComponentConstructor\n```\n\nImported styles, however, can be from SCSS files:\n\n```tsx {1-2,9} title=\"quartz/components/YourComponent.tsx\"\n// assuming your stylesheet is in quartz/components/styles/YourComponent.scss\nimport styles from \"./styles/YourComponent.scss\"\n\nexport default (() => {\n  function YourComponent() {\n    return <p>Example Component</p>\n  }\n\n  YourComponent.css = styles\n  return YourComponent\n}) satisfies QuartzComponentConstructor\n```\n\n> [!warning]\n> Quartz does not use CSS modules so any styles you declare here apply _globally_. If you only want it to apply to your component, make sure you use specific class names and selectors.\n\n### Scripts and Interactivity\n\nWhat about interactivity? Suppose you want to add an-click handler for example. Like the `.css` property on the component, you can also declare `.beforeDOMLoaded` and `.afterDOMLoaded` properties that are strings that contain the script.\n\n```tsx title=\"quartz/components/YourComponent.tsx\"\nexport default (() => {\n  function YourComponent() {\n    return <button id=\"btn\">Click me</button>\n  }\n\n  YourComponent.beforeDOM = `\n  console.log(\"hello from before the page loads!\")\n  `\n\n  YourComponent.afterDOM = `\n  document.getElementById('btn').onclick = () => {\n    alert('button clicked!')\n  }\n  `\n  return YourComponent\n}) satisfies QuartzComponentConstructor\n```\n\n> [!hint]\n> For those coming from React, Quartz components are different from React components in that it only uses JSX for templating and layout. Hooks like `useEffect`, `useState`, etc. are not rendered and other properties that accept functions like `onClick` handlers will not work. Instead, do it using a regular JS script that modifies the DOM element directly.\n\nAs the names suggest, the `.beforeDOMLoaded` scripts are executed _before_ the page is done loading so it doesn't have access to any elements on the page. This is mostly used to prefetch any critical data.\n\nThe `.afterDOMLoaded` script executes once the page has been completely loaded. This is a good place to setup anything that should last for the duration of a site visit (e.g. getting something saved from local storage).\n\nIf you need to create an `afterDOMLoaded` script that depends on _page specific_ elements that may change when navigating to a new page, you can listen for the `\"nav\"` event that gets fired whenever a page loads (which may happen on navigation if [[SPA Routing]] is enabled).\n\n```ts\ndocument.addEventListener(\"nav\", () => {\n  // do page specific logic here\n  // e.g. attach event listeners\n  const toggleSwitch = document.querySelector(\"#switch\") as HTMLInputElement\n  toggleSwitch.addEventListener(\"change\", switchTheme)\n  window.addCleanup(() => toggleSwitch.removeEventListener(\"change\", switchTheme))\n})\n```\n\nIt is best practice to track any event handlers via `window.addCleanup` to prevent memory leaks.\nThis will get called on page navigation.\n\n#### Importing Code\n\nOf course, it isn't always practical (nor desired!) to write your code as a string literal in the component.\n\nQuartz supports importing component code through `.inline.ts` files.\n\n```tsx title=\"quartz/components/YourComponent.tsx\"\n// @ts-ignore: typescript doesn't know about our inline bundling system\n// so we need to silence the error\nimport script from \"./scripts/graph.inline\"\n\nexport default (() => {\n  function YourComponent() {\n    return <button id=\"btn\">Click me</button>\n  }\n\n  YourComponent.afterDOM = script\n  return YourComponent\n}) satisfies QuartzComponentConstructor\n```\n\n```ts title=\"quartz/components/scripts/graph.inline.ts\"\n// any imports here are bundled for the browser\nimport * as d3 from \"d3\"\n\ndocument.getElementById(\"btn\").onclick = () => {\n  alert(\"button clicked!\")\n}\n```\n\nAdditionally, like what is shown in the example above, you can import packages in `.inline.ts` files. This will be bundled by Quartz and included in the actual script.\n\n### Using a Component\n\nAfter creating your custom component, re-export it in `quartz/components/index.ts`:\n\n```ts title=\"quartz/components/index.ts\" {4,10}\nimport ArticleTitle from \"./ArticleTitle\"\nimport Content from \"./pages/Content\"\nimport Darkmode from \"./Darkmode\"\nimport YourComponent from \"./YourComponent\"\n\nexport { ArticleTitle, Content, Darkmode, YourComponent }\n```\n\nThen, you can use it like any other component in `quartz.layout.ts` via `Component.YourComponent()`. See the [[configuration#Layout|layout]] section for more details.\n\nAs Quartz components are just functions that return React components, you can compositionally use them in other Quartz components.\n\n```tsx title=\"quartz/components/AnotherComponent.tsx\"\nimport YourComponent from \"./YourComponent\"\n\nexport default (() => {\n  function AnotherComponent(props: QuartzComponentProps) {\n    return (\n      <div>\n        <p>It's nested!</p>\n        <YourComponent {...props} />\n      </div>\n    )\n  }\n\n  return AnotherComponent\n}) satisfies QuartzComponentConstructor\n```\n\n> [!hint]\n> Look in `quartz/components` for more examples of components in Quartz as reference for your own components!\n"
  },
  "advanced/index": {
    "title": "index",
    "content": "---\nslug: index\ntitle: \"Advanced\"\n---\n"
  },
  "advanced/making-plugins": {
    "title": "making plugins",
    "content": "---\nslug: making-plugins\ntitle: Making your own plugins\n---\n\n> [!warning]\n> This part of the documentation will assume you have working knowledge in TypeScript and will include code snippets that describe the interface of what Quartz plugins should look like.\n\nQuartz's plugins are a series of transformations over content. This is illustrated in the diagram of the processing pipeline below:\n\n![[quartz transform pipeline.png]]\n\nAll plugins are defined as a function that takes in a single parameter for options `type OptionType = object | undefined` and return an object that corresponds to the type of plugin it is.\n\n```ts\ntype OptionType = object | undefined\ntype QuartzPlugin<Options extends OptionType = undefined> = (opts?: Options) => QuartzPluginInstance\ntype QuartzPluginInstance =\n  | QuartzTransformerPluginInstance\n  | QuartzFilterPluginInstance\n  | QuartzEmitterPluginInstance\n```\n\nThe following sections will go into detail for what methods can be implemented for each plugin type. Before we do that, let's clarify a few more ambiguous types:\n\n- `BuildCtx` is defined in `quartz/ctx.ts`. It consists of\n  - `argv`: The command line arguments passed to the Quartz [[build]] command\n  - `cfg`: The full Quartz [[configuration]]\n  - `allSlugs`: a list of all the valid content slugs (see [[paths]] for more information on what a `ServerSlug` is)\n- `StaticResources` is defined in `quartz/resources.tsx`. It consists of\n  - `css`: a list of URLs for stylesheets that should be loaded\n  - `js`: a list of scripts that should be loaded. A script is described with the `JSResource` type which is also defined in `quartz/resources.tsx`. It allows you to define a load time (either before or after the DOM has been loaded), whether it should be a module, and either the source URL or the inline content of the script.\n\n## Transformers\n\nTransformers **map** over content, taking a Markdown file and outputting modified content or adding metadata to the file itself.\n\n```ts\nexport type QuartzTransformerPluginInstance = {\n  name: string\n  textTransform?: (ctx: BuildCtx, src: string | Buffer) => string | Buffer\n  markdownPlugins?: (ctx: BuildCtx) => PluggableList\n  htmlPlugins?: (ctx: BuildCtx) => PluggableList\n  externalResources?: (ctx: BuildCtx) => Partial<StaticResources>\n}\n```\n\nAll transformer plugins must define at least a `name` field to register the plugin and a few optional functions that allow you to hook into various parts of transforming a single Markdown file.\n\n- `textTransform` performs a text-to-text transformation _before_ a file is parsed into the [Markdown AST](https://github.com/syntax-tree/mdast).\n- `markdownPlugins` defines a list of [remark plugins](https://github.com/remarkjs/remark/blob/main/doc/plugins.md). `remark` is a tool that transforms Markdown to Markdown in a structured way.\n- `htmlPlugins` defines a list of [rehype plugins](https://github.com/rehypejs/rehype/blob/main/doc/plugins.md). Similar to how `remark` works, `rehype` is a tool that transforms HTML to HTML in a structured way.\n- `externalResources` defines any external resources the plugin may need to load on the client-side for it to work properly.\n\nNormally for both `remark` and `rehype`, you can find existing plugins that you can use to . If you'd like to create your own `remark` or `rehype` plugin, checkout the [guide to creating a plugin](https://unifiedjs.com/learn/guide/create-a-plugin/) using `unified` (the underlying AST parser and transformer library).\n\nA good example of a transformer plugin that borrows from the `remark` and `rehype` ecosystems is the [[plugins/Latex|Latex]] plugin:\n\n```ts title=\"quartz/plugins/transformers/latex.ts\"\nimport remarkMath from \"remark-math\"\nimport rehypeKatex from \"rehype-katex\"\nimport rehypeMathjax from \"rehype-mathjax/svg\"\nimport { QuartzTransformerPlugin } from \"../types\"\n\ninterface Options {\n  renderEngine: \"katex\" | \"mathjax\"\n}\n\nexport const Latex: QuartzTransformerPlugin<Options> = (opts?: Options) => {\n  const engine = opts?.renderEngine ?? \"katex\"\n  return {\n    name: \"Latex\",\n    markdownPlugins() {\n      return [remarkMath]\n    },\n    htmlPlugins() {\n      if (engine === \"katex\") {\n        // if you need to pass options into a plugin, you\n        // can use a tuple of [plugin, options]\n        return [[rehypeKatex, { output: \"html\" }]]\n      } else {\n        return [rehypeMathjax]\n      }\n    },\n    externalResources() {\n      if (engine === \"katex\") {\n        return {\n          css: [\n            // base css\n            \"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.16.9/katex.min.css\",\n          ],\n          js: [\n            {\n              // fix copy behaviour: https://github.com/KaTeX/KaTeX/blob/main/contrib/copy-tex/README.md\n              src: \"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.16.9/contrib/copy-tex.min.js\",\n              loadTime: \"afterDOMReady\",\n              contentType: \"external\",\n            },\n          ],\n        }\n      } else {\n        return {}\n      }\n    },\n  }\n}\n```\n\nAnother common thing that transformer plugins will do is parse a file and add extra data for that file:\n\n```ts\nexport const AddWordCount: QuartzTransformerPlugin = () => {\n  return {\n    name: \"AddWordCount\",\n    markdownPlugins() {\n      return [\n        () => {\n          return (tree, file) => {\n            // tree is an `mdast` root element\n            // file is a `vfile`\n            const text = file.value\n            const words = text.split(\" \").length\n            file.data.wordcount = words\n          }\n        },\n      ]\n    },\n  }\n}\n\n// tell typescript about our custom data fields we are adding\n// other plugins will then also be aware of this data field\ndeclare module \"vfile\" {\n  interface DataMap {\n    wordcount: number\n  }\n}\n```\n\nFinally, you can also perform transformations over Markdown or HTML ASTs using the `visit` function from the `unist-util-visit` package or the `findAndReplace` function from the `mdast-util-find-and-replace` package.\n\n```ts\nexport const TextTransforms: QuartzTransformerPlugin = () => {\n  return {\n    name: \"TextTransforms\",\n    markdownPlugins() {\n      return [() => {\n        return (tree, file) => {\n          // replace _text_ with the italics version\n          findAndReplace(tree, /_(.+)_/, (_value: string, ...capture: string[]) => {\n            // inner is the text inside of the () of the regex\n            const [inner] = capture\n            // return an mdast node\n            // https://github.com/syntax-tree/mdast\n            return {\n              type: \"emphasis\",\n              children: [{ type: 'text', value: inner }]\n            }\n          })\n\n         // remove all links (replace with just the link content)\n         // match by 'type' field on an mdast node\n         // https://github.com/syntax-tree/mdast#link in this example\n          visit(tree, \"link\", (link: Link) => {\n            return {\n              type: \"paragraph\"\n              children: [{ type: 'text', value: link.title }]\n            }\n          })\n        }\n      }]\n    }\n  }\n}\n```\n\nAll transformer plugins can be found under `quartz/plugins/transformers`. If you decide to write your own transformer plugin, don't forget to re-export it under `quartz/plugins/transformers/index.ts`\n\nA parting word: transformer plugins are quite complex so don't worry if you don't get them right away. Take a look at the built in transformers and see how they operate over content to get a better sense for how to accomplish what you are trying to do.\n\n## Filters\n\nFilters **filter** content, taking the output of all the transformers and determining what files to actually keep and what to discard.\n\n```ts\nexport type QuartzFilterPlugin<Options extends OptionType = undefined> = (\n  opts?: Options,\n) => QuartzFilterPluginInstance\n\nexport type QuartzFilterPluginInstance = {\n  name: string\n  shouldPublish(ctx: BuildCtx, content: ProcessedContent): boolean\n}\n```\n\nA filter plugin must define a `name` field and a `shouldPublish` function that takes in a piece of content that has been processed by all the transformers and returns a `true` or `false` depending on whether it should be passed to the emitter plugins or not.\n\nFor example, here is the built-in plugin for removing drafts:\n\n```ts title=\"quartz/plugins/filters/draft.ts\"\nimport { QuartzFilterPlugin } from \"../types\"\n\nexport const RemoveDrafts: QuartzFilterPlugin<{}> = () => ({\n  name: \"RemoveDrafts\",\n  shouldPublish(_ctx, [_tree, vfile]) {\n    // uses frontmatter parsed from transformers\n    const draftFlag: boolean = vfile.data?.frontmatter?.draft ?? false\n    return !draftFlag\n  },\n})\n```\n\n## Emitters\n\nEmitters **reduce** over content, taking in a list of all the transformed and filtered content and creating output files.\n\n```ts\nexport type QuartzEmitterPlugin<Options extends OptionType = undefined> = (\n  opts?: Options,\n) => QuartzEmitterPluginInstance\n\nexport type QuartzEmitterPluginInstance = {\n  name: string\n  emit(ctx: BuildCtx, content: ProcessedContent[], resources: StaticResources): Promise<FilePath[]>\n  getQuartzComponents(ctx: BuildCtx): QuartzComponent[]\n}\n```\n\nAn emitter plugin must define a `name` field, an `emit` function, and a `getQuartzComponents` function. `emit` is responsible for looking at all the parsed and filtered content and then appropriately creating files and returning a list of paths to files the plugin created.\n\nCreating new files can be done via regular Node [fs module](https://nodejs.org/api/fs.html) (i.e. `fs.cp` or `fs.writeFile`) or via the `write` function in `quartz/plugins/emitters/helpers.ts` if you are creating files that contain text. `write` has the following signature:\n\n```ts\nexport type WriteOptions = (data: {\n  // the build context\n  ctx: BuildCtx\n  // the name of the file to emit (not including the file extension)\n  slug: making-plugins\n  // the file extension\n  ext: `.${string}` | \"\"\n  // the file content to add\n  content: string\n}) => Promise<FilePath>\n```\n\nThis is a thin wrapper around writing to the appropriate output folder and ensuring that intermediate directories exist. If you choose to use the native Node `fs` APIs, ensure you emit to the `argv.output` folder as well.\n\nIf you are creating an emitter plugin that needs to render components, there are three more things to be aware of:\n\n- Your component should use `getQuartzComponents` to declare a list of `QuartzComponents` that it uses to construct the page. See the page on [[creating components]] for more information.\n- You can use the `renderPage` function defined in `quartz/components/renderPage.tsx` to render Quartz components into HTML.\n- If you need to render an HTML AST to JSX, you can use the `htmlToJsx` function from `quartz/util/jsx.ts`. An example of this can be found in `quartz/components/pages/Content.tsx`.\n\nFor example, the following is a simplified version of the content page plugin that renders every single page.\n\n```tsx title=\"quartz/plugins/emitters/contentPage.tsx\"\nexport const ContentPage: QuartzEmitterPlugin = () => {\n  // construct the layout\n  const layout: FullPageLayout = {\n    ...sharedPageComponents,\n    ...defaultContentPageLayout,\n    pageBody: Content(),\n  }\n  const { head, header, beforeBody, pageBody, left, right, footer } = layout\n  return {\n    name: \"ContentPage\",\n    getQuartzComponents() {\n      return [head, ...header, ...beforeBody, pageBody, ...left, ...right, footer]\n    },\n    async emit(ctx, content, resources, emit): Promise<FilePath[]> {\n      const cfg = ctx.cfg.configuration\n      const fps: FilePath[] = []\n      const allFiles = content.map((c) => c[1].data)\n      for (const [tree, file] of content) {\n        const slug = canonicalizeServer(file.data.slug!)\n        const externalResources = pageResources(slug, resources)\n        const componentData: QuartzComponentProps = {\n          fileData: file.data,\n          externalResources,\n          cfg,\n          children: [],\n          tree,\n          allFiles,\n        }\n\n        const content = renderPage(cfg, slug, componentData, opts, externalResources)\n        const fp = await emit({\n          content,\n          slug: file.data.slug!,\n          ext: \".html\",\n        })\n\n        fps.push(fp)\n      }\n      return fps\n    },\n  }\n}\n```\n\nNote that it takes in a `FullPageLayout` as the options. It's made by combining a `SharedLayout` and a `PageLayout` both of which are provided through the `quartz.layout.ts` file.\n\n> [!hint]\n> Look in `quartz/plugins` for more examples of plugins in Quartz as reference for your own plugins!\n"
  },
  "advanced/paths": {
    "title": "paths",
    "content": "---\nslug: paths\ntitle: Paths in Quartz\n---\n\nPaths are pretty complex to reason about because, especially for a static site generator, they can come from so many places.\n\nA full file path to a piece of content? Also a path. What about a slug for a piece of content? Yet another path.\n\nIt would be silly to type these all as `string` and call it a day as it's pretty common to accidentally mistake one type of path for another. Unfortunately, TypeScript does not have [nominal types](https://en.wikipedia.org/wiki/Nominal_type_system) for type aliases meaning even if you made custom types of a server-side slug or a client-slug slug, you can still accidentally assign one to another and TypeScript wouldn't catch it.\n\nLuckily, we can mimic nominal typing using [brands](https://www.typescriptlang.org/play#example/nominal-typing).\n\n```typescript\n// instead of\ntype FullSlug = string\n\n// we do\ntype FullSlug = string & { __brand: \"full\" }\n\n// that way, the following will fail typechecking\nconst slug: paths\n```\n\nWhile this prevents most typing mistakes _within_ our nominal typing system (e.g. mistaking a server slug for a client slug), it doesn't prevent us from _accidentally_ mistaking a string for a client slug when we forcibly cast it.\n\nThus, we still need to be careful when casting from a string to one of these nominal types in the 'entrypoints', illustrated with hexagon shapes in the diagram below.\n\nThe following diagram draws the relationships between all the path sources, nominal path types, and what functions in `quartz/path.ts` convert between them.\n\n```mermaid\ngraph LR\n    Browser{{Browser}} --> Window{{Body}} & LinkElement{{Link Element}}\n    Window --\"getFullSlug()\"--> FullSlug[Full Slug]\n    LinkElement --\".href\"--> Relative[Relative URL]\n    FullSlug --\"simplifySlug()\" --> SimpleSlug[Simple Slug]\n    SimpleSlug --\"pathToRoot()\"--> Relative\n    SimpleSlug --\"resolveRelative()\" --> Relative\n    MD{{Markdown File}} --> FilePath{{File Path}} & Links[Markdown links]\n    Links --\"transformLink()\"--> Relative\n    FilePath --\"slugifyFilePath()\"--> FullSlug[Full Slug]\n    style FullSlug stroke-width:4px\n```\n\nHere are the main types of slugs with a rough description of each type of path:\n\n- `FilePath`: a real file path to a file on disk. Cannot be relative and must have a file extension.\n- `FullSlug`: cannot be relative and may not have leading or trailing slashes. It can have `index` as it's last segment. Use this wherever possible is it's the most 'general' interpretation of a slug.\n- `SimpleSlug`: cannot be relative and shouldn't have `/index` as an ending or a file extension. It _can_ however have a trailing slash to indicate a folder path.\n- `RelativeURL`: must start with `.` or `..` to indicate it's a relative URL. Shouldn't have `/index` as an ending or a file extension but can contain a trailing slash.\n\nTo get a clearer picture of how these relate to each other, take a look at the path tests in `quartz/util/path.test.ts`.\n"
  },
  "authoring-content": {
    "title": "authoring content",
    "content": "---\nslug: authoring-content\ntitle: Authoring Content\n---\n\nAll of the content in your Quartz should go in the `/content` folder. The content for the home page of your Quartz lives in `content/index.md`. If you've [[index#🪴 Get Started|setup Quartz]] already, this folder should already be initialized. Any Markdown in this folder will get processed by Quartz.\n\nIt is recommended that you use [Obsidian](https://obsidian.md/) as a way to edit and maintain your Quartz. It comes with a nice editor and graphical interface to preview, edit, and link your local files and attachments.\n\nGot everything setup? Let's [[build]] and preview your Quartz locally!\n\n## Syntax\n\nAs Quartz uses Markdown files as the main way of writing content, it fully supports Markdown syntax. By default, Quartz also ships with a few syntax extensions like [Github Flavored Markdown](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax) (footnotes, strikethrough, tables, tasklists) and [Obsidian Flavored Markdown](https://help.obsidian.md/Editing+and+formatting/Obsidian+Flavored+Markdown) ([[callouts]], [[wikilinks]]).\n\nAdditionally, Quartz also allows you to specify additional metadata in your notes called **frontmatter**.\n\n```md title=\"content/note.md\"\n---\ntitle: Example Title\ndraft: false\ntags:\n  - example-tag\n---\n\nThe rest of your content lives here. You can use **Markdown** here :)\n```\n\nSome common frontmatter fields that are natively supported by Quartz:\n\n- `title`: Title of the page. If it isn't provided, Quartz will use the name of the file as the title.\n- `description`: Description of the page used for link previews.\n- `aliases`: Other names for this note. This is a list of strings.\n- `tags`: Tags for this note.\n- `draft`: Whether to publish the page or not. This is one way to make [[private pages|pages private]] in Quartz.\n- `date`: A string representing the day the note was published. Normally uses `YYYY-MM-DD` format.\n\n## Syncing your Content\n\nWhen your Quartz is at a point you're happy with, you can save your changes to GitHub.\nFirst, make sure you've [[setting up your GitHub repository|already setup your GitHub repository]] and then do `npx quartz sync`.\n\n## Customization\n\nFrontmatter parsing for `title`, `tags`, `aliases` and `cssclasses` is a functionality of the [[Frontmatter]] plugin, `date` is handled by the [[CreatedModifiedDate]] plugin and `description` by the [[Description]] plugin. See the plugin pages for customization options.\n"
  },
  "build": {
    "title": "build",
    "content": "---\nslug: build\ntitle: \"Building your Quartz\"\n---\n\nOnce you've [[index#🪴 Get Started|initialized]] Quartz, let's see what it looks like locally:\n\n```bash\nnpx quartz build --serve\n```\n\nThis will start a local web server to run your Quartz on your computer. Open a web browser and visit `http://localhost:8080/` to view it.\n\n> [!hint] Flags and options\n> For full help options, you can run `npx quartz build --help`.\n>\n> Most of these have sensible defaults but you can override them if you have a custom setup:\n>\n> - `-d` or `--directory`: the content folder. This is normally just `content`\n> - `-v` or `--verbose`: print out extra logging information\n> - `-o` or `--output`: the output folder. This is normally just `public`\n> - `--serve`: run a local hot-reloading server to preview your Quartz\n> - `--port`: what port to run the local preview server on\n> - `--concurrency`: how many threads to use to parse notes\n"
  },
  "configuration": {
    "title": "configuration",
    "content": "---\nslug: configuration\ntitle: Configuration\n---\n\nQuartz is meant to be extremely configurable, even if you don't know any coding. Most of the configuration you should need can be done by just editing `quartz.config.ts` or changing [[layout|the layout]] in `quartz.layout.ts`.\n\n> [!tip]\n> If you edit Quartz configuration using a text-editor that has TypeScript language support like VSCode, it will warn you when you you've made an error in your configuration, helping you avoid configuration mistakes!\n\nThe configuration of Quartz can be broken down into two main parts:\n\n```ts title=\"quartz.config.ts\"\nconst config: QuartzConfig = {\n  configuration: { ... },\n  plugins: { ... },\n}\n```\n\n## General Configuration\n\nThis part of the configuration concerns anything that can affect the whole site. The following is a list breaking down all the things you can configure:\n\n- `pageTitle`: title of the site. This is also used when generating the [[RSS Feed]] for your site.\n- `enableSPA`: whether to enable [[SPA Routing]] on your site.\n- `enablePopovers`: whether to enable [[popover previews]] on your site.\n- `analytics`: what to use for analytics on your site. Values can be\n  - `null`: don't use analytics;\n  - `{ provider: 'google', tagId: '<your-google-tag>' }`: use Google Analytics;\n  - `{ provider: 'plausible' }` (managed) or `{ provider: 'plausible', host: '<your-plausible-host>' }` (self-hosted): use [Plausible](https://plausible.io/);\n  - `{ provider: 'umami', host: '<your-umami-host>', websiteId: '<your-umami-website-id>' }`: use [Umami](https://umami.is/);\n  - `{ provider: 'goatcounter', websiteId: 'my-goatcounter-id' }` (managed) or `{ provider: 'goatcounter', websiteId: 'my-goatcounter-id', host: 'my-goatcounter-domain.com', scriptSrc: 'https://my-url.to/counter.js' }` (self-hosted) use [GoatCounter](https://goatcounter.com);\n  - `{ provider: 'posthog', apiKey: '<your-posthog-project-apiKey>', host: '<your-posthog-host>' }`: use [Posthog](https://posthog.com/);\n  - `{ provider: 'tinylytics', siteId: '<your-site-id>' }`: use [Tinylytics](https://tinylytics.app/);\n- `locale`: used for [[i18n]] and date formatting\n- `baseUrl`: this is used for sitemaps and RSS feeds that require an absolute URL to know where the canonical 'home' of your site lives. This is normally the deployed URL of your site (e.g. `quartz.jzhao.xyz` for this site). Do not include the protocol (i.e. `https://`) or any leading or trailing slashes.\n  - This should also include the subpath if you are [[hosting]] on GitHub pages without a custom domain. For example, if my repository is `jackyzha0/quartz`, GitHub pages would deploy to `https://jackyzha0.github.io/quartz` and the `baseUrl` would be `jackyzha0.github.io/quartz`.\n  - Note that Quartz 4 will avoid using this as much as possible and use relative URLs whenever it can to make sure your site works no matter _where_ you end up actually deploying it.\n- `ignorePatterns`: a list of [glob](<https://en.wikipedia.org/wiki/Glob_(programming)>) patterns that Quartz should ignore and not search through when looking for files inside the `content` folder. See [[private pages]] for more details.\n- `defaultDateType`: whether to use created, modified, or published as the default date to display on pages and page listings.\n- `theme`: configure how the site looks.\n  - `cdnCaching`: If `true` (default), use Google CDN to cache the fonts. This will generally will be faster. Disable (`false`) this if you want Quartz to download the fonts to be self-contained.\n  - `typography`: what fonts to use. Any font available on [Google Fonts](https://fonts.google.com/) works here.\n    - `header`: Font to use for headers\n    - `code`: Font for inline and block quotes.\n    - `body`: Font for everything\n  - `colors`: controls the theming of the site.\n    - `light`: page background\n    - `lightgray`: borders\n    - `gray`: graph links, heavier borders\n    - `darkgray`: body text\n    - `dark`: header text and icons\n    - `secondary`: link colour, current [[graph view|graph]] node\n    - `tertiary`: hover states and visited [[graph view|graph]] nodes\n    - `highlight`: internal link background, highlighted text, [[syntax highlighting|highlighted lines of code]]\n\n## Plugins\n\nYou can think of Quartz plugins as a series of transformations over content.\n\n![[quartz transform pipeline.png]]\n\n```ts title=\"quartz.config.ts\"\nplugins: {\n  transformers: [...],\n  filters: [...],\n  emitters: [...],\n}\n```\n\n- [[tags/plugin/transformer|Transformers]] **map** over content (e.g. parsing frontmatter, generating a description)\n- [[tags/plugin/filter|Filters]] **filter** content (e.g. filtering out drafts)\n- [[tags/plugin/emitter|Emitters]] **reduce** over content (e.g. creating an RSS feed or pages that list all files with a specific tag)\n\nYou can customize the behaviour of Quartz by adding, removing and reordering plugins in the `transformers`, `filters` and `emitters` fields.\n\n> [!note]\n> Each node is modified by every transformer _in order_. Some transformers are position sensitive, so you may need to pay particular attention to whether they need to come before or after certain other plugins.\n\nYou should take care to add the plugin to the right entry corresponding to its plugin type. For example, to add the [[ExplicitPublish]] plugin (a [[tags/plugin/filter|Filter]]), you would add the following line:\n\n```ts title=\"quartz.config.ts\"\nfilters: [\n  ...\n  Plugin.ExplicitPublish(),\n  ...\n],\n```\n\nTo remove a plugin, you should remove all occurrences of it in the `quartz.config.ts`.\n\nTo customize plugins further, some plugins may also have their own configuration settings that you can pass in. If you do not pass in a configuration, the plugin will use its default settings.\n\nFor example, the [[plugins/Latex|Latex]] plugin allows you to pass in a field specifying the `renderEngine` to choose between Katex and MathJax.\n\n```ts title=\"quartz.config.ts\"\ntransformers: [\n  Plugin.FrontMatter(), // use default options\n  Plugin.Latex({ renderEngine: \"katex\" }), // set some custom options\n]\n```\n\nSome plugins are included by default in the[ `quartz.config.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz.config.ts), but there are more available.\n\nYou can see a list of all plugins and their configuration options [[tags/plugin|here]].\n\nIf you'd like to make your own plugins, see the [[making plugins|making custom plugins]] guide.\n"
  },
  "features/Docker-Support": {
    "title": "Docker Support",
    "content": "---\nslug: Docker-Support\n---\nQuartz comes shipped with a Docker image that will allow you to preview your Quartz locally without installing Node.\n\nYou can run the below one-liner to run Quartz in Docker.\n\n```sh\ndocker run --rm -itp 8080:8080 $(docker build -q .)\n```\n"
  },
  "features/Latex": {
    "title": "Latex",
    "content": "---\nslug: Latex\ntitle: LaTeX\ntags:\n  - feature/transformer\n---\n\nQuartz uses [Katex](https://katex.org/) by default to typeset both inline and block math expressions at build time.\n\n## Syntax\n\n### Block Math\n\nBlock math can be rendered by delimiting math expression with `$$`.\n\n```\n$$\nf(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi\n$$\n```\n\n$$\nf(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi\n$$\n\n$$\n\\begin{aligned}\na &= b + c \\\\ &= e + f \\\\\n\\end{aligned}\n$$\n\n$$\n\\begin{bmatrix}\n1 & 2 & 3 \\\\\na & b & c\n\\end{bmatrix}\n$$\n\n$$\n\\begin{array}{rll}\nE \\psi &= H\\psi & \\text{Expanding the Hamiltonian Operator} \\\\\n&= -\\frac{\\hbar^2}{2m}\\frac{\\partial^2}{\\partial x^2} \\psi + \\frac{1}{2}m\\omega x^2 \\psi & \\text{Using the ansatz $\\psi(x) = e^{-kx^2}f(x)$, hoping to cancel the $x^2$ term} \\\\\n&= -\\frac{\\hbar^2}{2m} [4k^2x^2f(x)+2(-2kx)f'(x) + f''(x)]e^{-kx^2} + \\frac{1}{2}m\\omega x^2 f(x)e^{-kx^2} &\\text{Removing the $e^{-kx^2}$ term from both sides} \\\\\n& \\Downarrow \\\\\nEf(x) &= -\\frac{\\hbar^2}{2m} [4k^2x^2f(x)-4kxf'(x) + f''(x)] + \\frac{1}{2}m\\omega x^2 f(x) & \\text{Choosing $k=\\frac{im}{2}\\sqrt{\\frac{\\omega}{\\hbar}}$ to cancel the $x^2$ term, via $-\\frac{\\hbar^2}{2m}4k^2=\\frac{1}{2}m \\omega$} \\\\\n&= -\\frac{\\hbar^2}{2m} [-4kxf'(x) + f''(x)] \\\\\n\\end{array}\n$$\n\n> [!warn]\n> Due to limitations in the [underlying parsing library](https://github.com/remarkjs/remark-math), block math in Quartz requires the `$$` delimiters to be on newlines like above.\n\n### Inline Math\n\nSimilarly, inline math can be rendered by delimiting math expression with a single `$`. For example, `$e^{i\\pi} = -1$` produces $e^{i\\pi} = -1$\n\n### Escaping symbols\n\nThere will be cases where you may have more than one `$` in a paragraph at once which may accidentally trigger MathJax/Katex.\n\nTo get around this, you can escape the dollar sign by doing `\\$` instead.\n\nFor example:\n\n- Incorrect: `I have $1 and you have $2` produces I have $1 and you have $2\n- Correct: `I have \\$1 and you have \\$2` produces I have \\$1 and you have \\$2\n\n### Using mhchem\n\nAdd the following import to the top of `quartz/plugins/transformers/latex.ts` (before all the other\nimports):\n\n```ts title=\"quartz/plugins/transformers/latex.ts\"\nimport \"katex/contrib/mhchem\"\n```\n\n## Customization\n\nLatex parsing is a functionality of the [[plugins/Latex|Latex]] plugin. See the plugin page for customization options.\n"
  },
  "features/Mermaid-diagrams": {
    "title": "Mermaid diagrams",
    "content": "---\nslug: Mermaid-diagrams\ntitle: \"Mermaid Diagrams\"\ntags:\n  - feature/transformer\n---\n\nQuartz supports Mermaid which allows you to add diagrams and charts to your notes. Mermaid supports a range of diagrams, such as [flow charts](https://mermaid.js.org/syntax/flowchart.html), [sequence diagrams](https://mermaid.js.org/syntax/sequenceDiagram.html), and [timelines](https://mermaid.js.org/syntax/timeline.html). This is enabled as a part of [[Obsidian compatibility]] and can be configured and enabled/disabled from that plugin.\n\nBy default, Quartz will render Mermaid diagrams to match the site theme.\n\n> [!warning]\n> Wondering why Mermaid diagrams may not be showing up even if you have them enabled? You may need to reorder your plugins so that [[ObsidianFlavoredMarkdown]] is _after_ [[SyntaxHighlighting]].\n\n## Syntax\n\nTo add a Mermaid diagram, create a mermaid code block.\n\n````\n```mermaid\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n```\n````\n\n```mermaid\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n```\n"
  },
  "features/Obsidian-compatibility": {
    "title": "Obsidian compatibility",
    "content": "---\nslug: Obsidian-compatibility\ntitle: \"Obsidian Compatibility\"\ntags:\n  - feature/transformer\n---\n\nQuartz was originally designed as a tool to publish Obsidian vaults as websites. Even as the scope of Quartz has widened over time, it hasn't lost the ability to seamlessly interoperate with Obsidian.\n\nBy default, Quartz ships with the [[ObsidianFlavoredMarkdown]] plugin, which is a transformer plugin that adds support for [Obsidian Flavored Markdown](https://help.obsidian.md/Editing+and+formatting/Obsidian+Flavored+Markdown). This includes support for features like [[wikilinks]] and [[Mermaid diagrams]].\n\nIt also ships with support for [frontmatter parsing](https://help.obsidian.md/Editing+and+formatting/Properties) with the same fields that Obsidian uses through the [[Frontmatter]] transformer plugin.\n\nFinally, Quartz also provides [[CrawlLinks]] plugin, which allows you to customize Quartz's link resolution behaviour to match Obsidian.\n\n## Configuration\n\nThis functionality is provided by the [[ObsidianFlavoredMarkdown]], [[Frontmatter]] and [[CrawlLinks]] plugins. See the plugin pages for customization options.\n"
  },
  "features/OxHugo-compatibility": {
    "title": "OxHugo compatibility",
    "content": "---\nslug: OxHugo-compatibility\ntitle: \"OxHugo Compatibility\"\ntags:\n  - feature/transformer\n---\n\n[org-roam](https://www.orgroam.com/) is a plain-text personal knowledge management system for [emacs](https://en.wikipedia.org/wiki/Emacs). [ox-hugo](https://github.com/kaushalmodi/ox-hugo) is org exporter backend that exports `org-mode` files to [Hugo](https://gohugo.io/) compatible Markdown.\n\nBecause the Markdown generated by ox-hugo is not pure Markdown but Hugo specific, we need to transform it to fit into Quartz. This is done by the [[OxHugoFlavoredMarkdown]] plugin. Even though this plugin was written with `ox-hugo` in mind, it should work for any Hugo specific Markdown.\n\n```typescript title=\"quartz.config.ts\"\nplugins: {\n  transformers: [\n    Plugin.FrontMatter({ delims: \"+++\", language: \"toml\" }), // if toml frontmatter\n    // ...\n    Plugin.OxHugoFlavouredMarkdown(),\n    Plugin.GitHubFlavoredMarkdown(),\n    // ...\n  ],\n},\n```\n\n## Usage\n\nQuartz by default doesn't understand `org-roam` files as they aren't Markdown. You're responsible for using an external tool like `ox-hugo` to export the `org-roam` files as Markdown content to Quartz and managing the static assets so that they're available in the final output.\n\n## Configuration\n\nThis functionality is provided by the [[OxHugoFlavoredMarkdown]] plugin. See the plugin page for customization options.\n"
  },
  "features/RSS-Feed": {
    "title": "RSS Feed",
    "content": "---\nslug: RSS-Feed\n---\nQuartz emits an RSS feed for all the content on your site by generating an `index.xml` file that RSS readers can subscribe to. Because of the RSS spec, this requires the `baseUrl` property in your [[configuration]] to be set properly for RSS readers to pick it up properly.\n\n## Configuration\n\nThis functionality is provided by the [[ContentIndex]] plugin. See the plugin page for customization options.\n"
  },
  "features/SPA-Routing": {
    "title": "SPA Routing",
    "content": "---\nslug: SPA-Routing\n---\nSingle-page-app style rendering. This prevents flashes of unstyled content and improves the smoothness of Quartz.\n\nUnder the hood, this is done by hijacking page navigations and instead fetching the HTML via a `GET` request and then diffing and selectively replacing parts of the page using [micromorph](https://github.com/natemoo-re/micromorph). This allows us to change the content of the page without fully refreshing the page, reducing the amount of content that the browser needs to load.\n\n## Configuration\n\n- Disable SPA Routing: set the `enableSPA` field of the [[configuration]] in `quartz.config.ts` to be `false`.\n"
  },
  "features/backlinks": {
    "title": "backlinks",
    "content": "---\nslug: backlinks\ntitle: Backlinks\ntags:\n  - component\n---\n\nA backlink for a note is a link from another note to that note. Links in the backlink pane also feature rich [[popover previews]] if you have that feature enabled.\n\n## Customization\n\n- Removing backlinks: delete all usages of `Component.Backlinks()` from `quartz.layout.ts`.\n- Component: `quartz/components/Backlinks.tsx`\n- Style: `quartz/components/styles/backlinks.scss`\n- Script: `quartz/components/scripts/search.inline.ts`\n"
  },
  "features/breadcrumbs": {
    "title": "breadcrumbs",
    "content": "---\nslug: breadcrumbs\ntitle: \"Breadcrumbs\"\ntags:\n  - component\n---\n\nBreadcrumbs provide a way to navigate a hierarchy of pages within your site using a list of its parent folders.\n\nBy default, the element at the very top of your page is the breadcrumb navigation bar (can also be seen at the top on this page!).\n\n## Customization\n\nMost configuration can be done by passing in options to `Component.Breadcrumbs()`.\n\nFor example, here's what the default configuration looks like:\n\n```typescript title=\"quartz.layout.ts\"\nComponent.Breadcrumbs({\n  spacerSymbol: \"❯\", // symbol between crumbs\n  rootName: \"Home\", // name of first/root element\n  resolveFrontmatterTitle: true, // whether to resolve folder names through frontmatter titles\n  hideOnRoot: true, // whether to hide breadcrumbs on root `index.md` page\n  showCurrentPage: true, // whether to display the current page in the breadcrumbs\n})\n```\n\nWhen passing in your own options, you can omit any or all of these fields if you'd like to keep the default value for that field.\n\nYou can also adjust where the breadcrumbs will be displayed by adjusting the [[layout]] (moving `Component.Breadcrumbs()` up or down)\n\nWant to customize it even more?\n\n- Removing breadcrumbs: delete all usages of `Component.Breadcrumbs()` from `quartz.layout.ts`.\n- Component: `quartz/components/Breadcrumbs.tsx`\n- Style: `quartz/components/styles/breadcrumbs.scss`\n- Script: inline at `quartz/components/Breadcrumbs.tsx`\n"
  },
  "features/callouts": {
    "title": "callouts",
    "content": "---\nslug: callouts\ntitle: Callouts\ntags:\n  - feature/transformer\n---\n\nQuartz supports the same Admonition-callout syntax as Obsidian.\n\nThis includes\n\n- 12 Distinct callout types (each with several aliases)\n- Collapsable callouts\n\n```\n> [!info] Title\n> This is a callout!\n```\n\nSee [documentation on supported types and syntax here](https://help.obsidian.md/Editing+and+formatting/Callouts).\n\n> [!warning]\n> Wondering why callouts may not be showing up even if you have them enabled? You may need to reorder your plugins so that [[ObsidianFlavoredMarkdown]] is _after_ [[SyntaxHighlighting]].\n\n## Customization\n\nThe callouts are a functionality of the [[ObsidianFlavoredMarkdown]] plugin. See the plugin page for how to enable or disable them.\n\nYou can edit the icons by customizing `quartz/styles/callouts.scss`.\n\n### Add custom callouts\n\nBy default, custom callouts are handled by applying the `note` style. To make fancy ones, you have to add these lines to `custom.scss`.\n\n```scss title=\"quartz/styles/custom.scss\"\n.callout {\n  &[data-callout=\"custom\"] {\n    --color: #customcolor;\n    --border: #custombordercolor;\n    --bg: #custombg;\n    --callout-icon: url(\"data:image/svg+xml; utf8, <custom formatted svg>\"); //SVG icon code\n  }\n}\n```\n\n> [!warning]\n> Don't forget to ensure that the SVG is URL encoded before putting it in the CSS. You can use tools like [this one](https://yoksel.github.io/url-encoder/) to help you do that.\n\n## Showcase\n\n> [!info]\n> Default title\n\n> [!question]+ Can callouts be _nested_?\n>\n> > [!todo]- Yes!, they can. And collapsed!\n> >\n> > > [!example] You can even use multiple layers of nesting.\n\n> [!note]\n> Aliases: \"note\"\n\n> [!abstract]\n> Aliases: \"abstract\", \"summary\", \"tldr\"\n\n> [!info]\n> Aliases: \"info\"\n\n> [!todo]\n> Aliases: \"todo\"\n\n> [!tip]\n> Aliases: \"tip\", \"hint\", \"important\"\n\n> [!success]\n> Aliases: \"success\", \"check\", \"done\"\n\n> [!question]\n> Aliases: \"question\", \"help\", \"faq\"\n\n> [!warning]\n> Aliases: \"warning\", \"attention\", \"caution\"\n\n> [!failure]\n> Aliases: \"failure\", \"missing\", \"fail\"\n\n> [!danger]\n> Aliases: \"danger\", \"error\"\n\n> [!bug]\n> Aliases: \"bug\"\n\n> [!example]\n> Aliases: \"example\"\n\n> [!quote]\n> Aliases: \"quote\", \"cite\"\n"
  },
  "features/darkmode": {
    "title": "darkmode",
    "content": "---\nslug: darkmode\ntitle: \"Darkmode\"\ntags:\n  - component\n---\n\nQuartz supports darkmode out of the box that respects the user's theme preference. Any future manual toggles of the darkmode switch will be saved in the browser's local storage so it can be persisted across future page loads.\n\n## Customization\n\n- Removing darkmode: delete all usages of `Component.Darkmode()` from `quartz.layout.ts`.\n- Component: `quartz/components/Darkmode.tsx`\n- Style: `quartz/components/styles/darkmode.scss`\n- Script: `quartz/components/scripts/darkmode.inline.ts`\n\nYou can also listen to the `themechange` event to perform any custom logic when the theme changes.\n\n```js\ndocument.addEventListener(\"themechange\", (e) => {\n  console.log(\"Theme changed to \" + e.detail.theme) // either \"light\" or \"dark\"\n  // your logic here\n})\n```\n"
  },
  "features/explorer": {
    "title": "explorer",
    "content": "---\nslug: explorer\ntitle: \"Explorer\"\ntags:\n  - component\n---\n\nQuartz features an explorer that allows you to navigate all files and folders on your site. It supports nested folders and is highly customizable.\n\nBy default, it shows all folders and files on your page. To display the explorer in a different spot, you can edit the [[layout]].\n\nDisplay names for folders get determined by the `title` frontmatter field in `folder/index.md` (more detail in [[authoring content | Authoring Content]]). If this file does not exist or does not contain frontmatter, the local folder name will be used instead.\n\n> [!info]\n> The explorer uses local storage by default to save the state of your explorer. This is done to ensure a smooth experience when navigating to different pages.\n>\n> To clear/delete the explorer state from local storage, delete the `fileTree` entry (guide on how to delete a key from local storage in chromium based browsers can be found [here](https://docs.devolutions.net/kb/general-knowledge-base/clear-browser-local-storage/clear-chrome-local-storage/)). You can disable this by passing `useSavedState: false` as an argument.\n\n## Customization\n\nMost configuration can be done by passing in options to `Component.Explorer()`.\n\nFor example, here's what the default configuration looks like:\n\n```typescript title=\"quartz.layout.ts\"\nComponent.Explorer({\n  title: \"Explorer\", // title of the explorer component\n  folderClickBehavior: \"collapse\", // what happens when you click a folder (\"link\" to navigate to folder page on click or \"collapse\" to collapse folder on click)\n  folderDefaultState: \"collapsed\", // default state of folders (\"collapsed\" or \"open\")\n  useSavedState: true, // whether to use local storage to save \"state\" (which folders are opened) of explorer\n  // Sort order: folders first, then files. Sort folders and files alphabetically\n  sortFn: (a, b) => {\n    ... // default implementation shown later\n  },\n  filterFn: filterFn: (node) => node.name !== \"tags\", // filters out 'tags' folder\n  mapFn: undefined,\n  // what order to apply functions in\n  order: [\"filter\", \"map\", \"sort\"],\n})\n```\n\nWhen passing in your own options, you can omit any or all of these fields if you'd like to keep the default value for that field.\n\nWant to customize it even more?\n\n- Removing explorer: remove `Component.Explorer()` from `quartz.layout.ts`\n  - (optional): After removing the explorer component, you can move the [[table of contents | Table of Contents]] component back to the `left` part of the layout\n- Changing `sort`, `filter` and `map` behavior: explained in [[#Advanced customization]]\n- Component:\n  - Wrapper (Outer component, generates file tree, etc): `quartz/components/Explorer.tsx`\n  - Explorer node (recursive, either a folder or a file): `quartz/components/ExplorerNode.tsx`\n- Style: `quartz/components/styles/explorer.scss`\n- Script: `quartz/components/scripts/explorer.inline.ts`\n\n## Advanced customization\n\nThis component allows you to fully customize all of its behavior. You can pass a custom `sort`, `filter` and `map` function.\nAll functions you can pass work with the `FileNode` class, which has the following properties:\n\n```ts title=\"quartz/components/ExplorerNode.tsx\" {2-5}\nexport class FileNode {\n  children: FileNode[]  // children of current node\n  name: string  // last part of slug\n  displayName: string // what actually should be displayed in the explorer\n  file: QuartzPluginData | null // if node is a file, this is the file's metadata. See `QuartzPluginData` for more detail\n  depth: number // depth of current node\n\n  ... // rest of implementation\n}\n```\n\nEvery function you can pass is optional. By default, only a `sort` function will be used:\n\n```ts title=\"Default sort function\"\n// Sort order: folders first, then files. Sort folders and files alphabetically\nComponent.Explorer({\n  sortFn: (a, b) => {\n    if ((!a.file && !b.file) || (a.file && b.file)) {\n      // sensitivity: \"base\": Only strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A\n      // numeric: true: Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\"\n      return a.displayName.localeCompare(b.displayName, undefined, {\n        numeric: true,\n        sensitivity: \"base\",\n      })\n    }\n    if (a.file && !b.file) {\n      return 1\n    } else {\n      return -1\n    }\n  },\n})\n```\n\n---\n\nYou can pass your own functions for `sortFn`, `filterFn` and `mapFn`. All functions will be executed in the order provided by the `order` option (see [[#Customization]]). These functions behave similarly to their `Array.prototype` counterpart, except they modify the entire `FileNode` tree in place instead of returning a new one.\n\nFor more information on how to use `sort`, `filter` and `map`, you can check [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort), [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) and [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\nType definitions look like this:\n\n```ts\nsortFn: (a: FileNode, b: FileNode) => number\nfilterFn: (node: FileNode) => boolean\nmapFn: (node: FileNode) => void\n```\n\n> [!tip]\n> You can check if a `FileNode` is a folder or a file like this:\n>\n> ```ts\n> if (node.file) {\n>   // node is a file\n> } else {\n>   // node is a folder\n> }\n> ```\n\n## Basic examples\n\nThese examples show the basic usage of `sort`, `map` and `filter`.\n\n### Use `sort` to put files first\n\nUsing this example, the explorer will alphabetically sort everything, but put all **files** above all **folders**.\n\n```ts title=\"quartz.layout.ts\"\nComponent.Explorer({\n  sortFn: (a, b) => {\n    if ((!a.file && !b.file) || (a.file && b.file)) {\n      return a.displayName.localeCompare(b.displayName)\n    }\n    if (a.file && !b.file) {\n      return -1\n    } else {\n      return 1\n    }\n  },\n})\n```\n\n### Change display names (`map`)\n\nUsing this example, the display names of all `FileNodes` (folders + files) will be converted to full upper case.\n\n```ts title=\"quartz.layout.ts\"\nComponent.Explorer({\n  mapFn: (node) => {\n    node.displayName = node.displayName.toUpperCase()\n  },\n})\n```\n\n### Remove list of elements (`filter`)\n\nUsing this example, you can remove elements from your explorer by providing an array of folders/files using the `omit` set.\n\n```ts title=\"quartz.layout.ts\"\nComponent.Explorer({\n  filterFn: (node) => {\n    // set containing names of everything you want to filter out\n    const omit = new Set([\"authoring content\", \"tags\", \"hosting\"])\n    return !omit.has(node.name.toLowerCase())\n  },\n})\n```\n\nYou can customize this by changing the entries of the `omit` set. Simply add all folder or file names you want to remove.\n\n### Remove files by tag\n\nYou can access the frontmatter of a file by `node.file?.frontmatter?`. This allows you to filter out files based on their frontmatter, for example by their tags.\n\n```ts title=\"quartz.layout.ts\"\nComponent.Explorer({\n  filterFn: (node) => {\n    // exclude files with the tag \"explorerexclude\"\n    return node.file?.frontmatter?.tags?.includes(\"explorerexclude\") !== true\n  },\n})\n```\n\n### Show every element in explorer\n\nTo override the default filter function that removes the `tags` folder from the explorer, you can set the filter function to `undefined`.\n\n```ts title=\"quartz.layout.ts\"\nComponent.Explorer({\n  filterFn: undefined, // apply no filter function, every file and folder will visible\n})\n```\n\n## Advanced examples\n\n> [!tip]\n> When writing more complicated functions, the `layout` file can start to look very cramped.\n> You can fix this by defining your functions in another file.\n>\n> ```ts title=\"functions.ts\"\n> import { Options } from \"./quartz/components/ExplorerNode\"\n> export const mapFn: Options[\"mapFn\"] = (node) => {\n>   // implement your function here\n> }\n> export const filterFn: Options[\"filterFn\"] = (node) => {\n>   // implement your function here\n> }\n> export const sortFn: Options[\"sortFn\"] = (a, b) => {\n>   // implement your function here\n> }\n> ```\n>\n> You can then import them like this:\n>\n> ```ts title=\"quartz.layout.ts\"\n> import { mapFn, filterFn, sortFn } from \"./functions.ts\"\n> Component.Explorer({\n>   mapFn: mapFn,\n>   filterFn: filterFn,\n>   sortFn: sortFn,\n> })\n> ```\n\n### Add emoji prefix\n\nTo add emoji prefixes (📁 for folders, 📄 for files), you could use a map function like this:\n\n```ts title=\"quartz.layout.ts\"\nComponent.Explorer({\n  mapFn: (node) => {\n    // dont change name of root node\n    if (node.depth > 0) {\n      // set emoji for file/folder\n      if (node.file) {\n        node.displayName = \"📄 \" + node.displayName\n      } else {\n        node.displayName = \"📁 \" + node.displayName\n      }\n    }\n  },\n})\n```\n\n### Putting it all together\n\nIn this example, we're going to customize the explorer by using functions from examples above to [[#Add emoji prefix | add emoji prefixes]], [[#remove-list-of-elements-filter| filter out some folders]] and [[#use-sort-to-put-files-first | sort with files above folders]].\n\n```ts title=\"quartz.layout.ts\"\nComponent.Explorer({\n  filterFn: sampleFilterFn,\n  mapFn: sampleMapFn,\n  sortFn: sampleSortFn,\n  order: [\"filter\", \"sort\", \"map\"],\n})\n```\n\nNotice how we customized the `order` array here. This is done because the default order applies the `sort` function last. While this normally works well, it would cause unintended behavior here, since we changed the first characters of all display names. In our example, `sort` would be applied based off the emoji prefix instead of the first _real_ character.\n\nTo fix this, we just changed around the order and apply the `sort` function before changing the display names in the `map` function.\n\n### Use `sort` with pre-defined sort order\n\nHere's another example where a map containing file/folder names (as slugs) is used to define the sort order of the explorer in quartz. All files/folders that aren't listed inside of `nameOrderMap` will appear at the top of that folders hierarchy level.\n\nIt's also worth mentioning, that the smaller the number set in `nameOrderMap`, the higher up the entry will be in the explorer. Incrementing every folder/file by 100, makes ordering files in their folders a lot easier. Lastly, this example still allows you to use a `mapFn` or frontmatter titles to change display names, as it uses slugs for `nameOrderMap` (which is unaffected by display name changes).\n\n```ts title=\"quartz.layout.ts\"\nComponent.Explorer({\n  sortFn: (a, b) => {\n    const nameOrderMap: Record<string, number> = {\n      \"poetry-folder\": 100,\n      \"essay-folder\": 200,\n      \"research-paper-file\": 201,\n      \"dinosaur-fossils-file\": 300,\n      \"other-folder\": 400,\n    }\n\n    let orderA = 0\n    let orderB = 0\n\n    if (a.file && a.file.slug) {\n      orderA = nameOrderMap[a.file.slug] || 0\n    } else if (a.name) {\n      orderA = nameOrderMap[a.name] || 0\n    }\n\n    if (b.file && b.file.slug) {\n      orderB = nameOrderMap[b.file.slug] || 0\n    } else if (b.name) {\n      orderB = nameOrderMap[b.name] || 0\n    }\n\n    return orderA - orderB\n  },\n})\n```\n\nFor reference, this is how the quartz explorer window would look like with that example:\n\n```\n📖 Poetry Folder\n📑 Essay Folder\n    ⚗️ Research Paper File\n🦴 Dinosaur Fossils File\n🔮 Other Folder\n```\n\nAnd this is how the file structure would look like:\n\n```\nindex.md\npoetry-folder\n    index.md\nessay-folder\n    index.md\n    research-paper-file.md\ndinosaur-fossils-file.md\nother-folder\n    index.md\n```\n"
  },
  "features/folder-and-tag-listings": {
    "title": "folder and tag listings",
    "content": "---\nslug: folder-and-tag-listings\ntitle: Folder and Tag Listings\ntags:\n  - feature/emitter\n---\n\nQuartz emits listing pages for any folders and tags you have.\n\n## Folder Listings\n\nQuartz will generate an index page for all the pages under that folder. This includes any content that is multiple levels deep.\n\nAdditionally, Quartz will also generate pages for subfolders. Say you have a note in a nested folder `content/abc/def/note.md`. Then Quartz would generate a page for all the notes under `abc` _and_ a page for all the notes under `abc/def`.\n\nYou can link to the folder listing by referencing its name, plus a trailing slash, like this: `[[advanced/]]` (results in [[advanced/]]).\n\nBy default, Quartz will title the page `Folder: <folder name>` and no description. You can override this by creating an `index.md` file in the folder with the `title` [[authoring content#Syntax|frontmatter]] field. Any content you write in this file will also be used in the folder description.\n\nFor example, for the folder `content/posts`, you can add another file `content/posts/index.md` to add a specific description for it.\n\n## Tag Listings\n\nQuartz will also create an index page for each unique tag in your vault and render a list of all notes with that tag.\n\nQuartz also supports tag hierarchies as well (e.g. `plugin/emitter`) and will also render a separate tag page for each level of the tag hierarchy. It will also create a default global tag index page at `/tags` that displays a list of all the tags in your Quartz.\n\nYou can link to the tag listing by referencing its name with a `tag/` prefix, like this: `[[tags/plugin]]` (results in [[tags/plugin]]).\n\nAs with folder listings, you can also provide a description and title for a tag page by creating a file for each tag. For example, if you wanted to create a custom description for the #component tag, you would create a file at `content/tags/component.md` with a title and description.\n\n## Customization\n\nThe folder listings are a functionality of the [[FolderPage]] plugin, the tag listings of the [[TagPage]] plugin. See the plugin pages for customization options.\n"
  },
  "features/full-text-search": {
    "title": "full-text search",
    "content": "---\nslug: full-text-search\ntitle: Full-text Search\ntags:\n  - component\n---\n\nFull-text search in Quartz is powered by [Flexsearch](https://github.com/nextapps-de/flexsearch). It's fast enough to return search results in under 10ms for Quartzs as large as half a million words.\n\nIt can be opened by either clicking on the search bar or pressing `⌘`/`ctrl` + `K`. The top 5 search results are shown on each query. Matching subterms are highlighted and the most relevant 30 words are excerpted. Clicking on a search result will navigate to that page.\n\nTo search content by tags, you can either press `⌘`/`ctrl` + `shift` + `K` or start your query with `#` (e.g. `#components`).\n\nThis component is also keyboard accessible: Tab and Shift+Tab will cycle forward and backward through search results and Enter will navigate to the highlighted result (first result by default). You are also able to navigate search results using `ArrowUp` and `ArrowDown`.\n\n> [!info]\n> Search requires the `ContentIndex` emitter plugin to be present in the [[configuration]].\n\n### Indexing Behaviour\n\nBy default, it indexes every page on the site with **Markdown syntax removed**. This means link URLs for instance are not indexed.\n\nIt properly tokenizes Chinese, Korean, and Japenese characters and constructs separate indexes for the title, content and tags, weighing title matches above content matches.\n\n## Customization\n\n- Removing search: delete all usages of `Component.Search()` from `quartz.layout.ts`.\n- Component: `quartz/components/Search.tsx`\n- Style: `quartz/components/styles/search.scss`\n- Script: `quartz/components/scripts/search.inline.ts`\n  - You can edit `contextWindowWords`, `numSearchResults` or `numTagResults` to suit your needs\n"
  },
  "features/graph-view": {
    "title": "graph view",
    "content": "---\nslug: graph-view\ntitle: \"Graph View\"\ntags:\n  - component\n---\n\nQuartz features a graph-view that can show both a local graph view and a global graph view.\n\n- The local graph view shows files that either link to the current file or are linked from the current file. In other words, it shows all notes that are _at most_ one hop away.\n- The global graph view can be toggled by clicking the graph icon on the top-right of the local graph view. It shows _all_ the notes in your graph and how they connect to each other.\n\nBy default, the node radius is proportional to the total number of incoming and outgoing internal links from that file.\n\nAdditionally, similar to how browsers highlight visited links a different colour, the graph view will also show nodes that you have visited in a different colour.\n\n> [!info]\n> Graph View requires the `ContentIndex` emitter plugin to be present in the [[configuration]].\n\n## Customization\n\nMost configuration can be done by passing in options to `Component.Graph()`.\n\nFor example, here's what the default configuration looks like:\n\n```typescript title=\"quartz.layout.ts\"\nComponent.Graph({\n  localGraph: {\n    drag: true, // whether to allow panning the view around\n    zoom: true, // whether to allow zooming in and out\n    depth: 1, // how many hops of notes to display\n    scale: 1.1, // default view scale\n    repelForce: 0.5, // how much nodes should repel each other\n    centerForce: 0.3, // how much force to use when trying to center the nodes\n    linkDistance: 30, // how long should the links be by default?\n    fontSize: 0.6, // what size should the node labels be?\n    opacityScale: 1, // how quickly do we fade out the labels when zooming out?\n    removeTags: [], // what tags to remove from the graph\n    showTags: true, // whether to show tags in the graph\n  },\n  globalGraph: {\n    drag: true,\n    zoom: true,\n    depth: -1,\n    scale: 0.9,\n    repelForce: 0.5,\n    centerForce: 0.3,\n    linkDistance: 30,\n    fontSize: 0.6,\n    opacityScale: 1,\n    removeTags: [], // what tags to remove from the graph\n    showTags: true, // whether to show tags in the graph\n  },\n})\n```\n\nWhen passing in your own options, you can omit any or all of these fields if you'd like to keep the default value for that field.\n\nWant to customize it even more?\n\n- Removing graph view: delete all usages of `Component.Graph()` from `quartz.layout.ts`.\n- Component: `quartz/components/Graph.tsx`\n- Style: `quartz/components/styles/graph.scss`\n- Script: `quartz/components/scripts/graph.inline.ts`\n"
  },
  "features/i18n": {
    "title": "i18n",
    "content": "---\nslug: i18n\ntitle: Internationalization\n---\n\nInternationalization allows users to translate text in the Quartz interface into various supported languages without needing to make extensive code changes. This can be changed via the `locale` [[configuration]] field in `quartz.config.ts`.\n\nThe locale field generally follows a certain format: `{language}-{REGION}`\n\n- `{language}` is usually a [2-letter lowercase language code](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes).\n- `{REGION}` is usually a [2-letter uppercase region code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n\n> [!tip] Interested in contributing?\n> We [gladly welcome translation PRs](https://github.com/jackyzha0/quartz/tree/v4/quartz/i18n/locales)! To contribute a translation, do the following things:\n>\n> 1. In the `quartz/i18n/locales` folder, copy the `en-US.ts` file.\n> 2. Rename it to `{language}-{REGION}.ts` so it matches a locale of the format shown above.\n> 3. Fill in the translations!\n> 4. Add the entry under `TRANSLATIONS` in `quartz/i18n/index.ts`.\n"
  },
  "features/index": {
    "title": "index",
    "content": "---\nslug: index\ntitle: Feature List\n---\n"
  },
  "features/popover-previews": {
    "title": "popover previews",
    "content": "---\nslug: popover-previews\ntitle: Popover Previews\n---\n\nLike Wikipedia, when you hover over a link in Quartz, there is a popup of a page preview that you can scroll to see the entire content. Links to headers will also scroll the popup to show that specific header in view.\n\nBy default, Quartz only fetches previews for pages inside your vault due to [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS). It does this by selecting all HTML elements with the `popover-hint` class. For most pages, this includes the page title, page metadata like words and time to read, tags, and the actual page content.\n\nWhen [[creating components|creating your own components]], you can include this `popover-hint` class to also include it in the popover.\n\nSimilar to Obsidian, [[quartz layout.png|images referenced using wikilinks]] can also be viewed as popups.\n\n## Configuration\n\n- Remove popovers: set the `enablePopovers` field in `quartz.config.ts` to be `false`.\n- Style: `quartz/components/styles/popover.scss`\n- Script: `quartz/components/scripts/popover.inline.ts`\n"
  },
  "features/private-pages": {
    "title": "private pages",
    "content": "---\nslug: private-pages\ntitle: Private Pages\ntags:\n  - feature/filter\n---\n\nThere may be some notes you want to avoid publishing as a website. Quartz supports this through two mechanisms which can be used in conjunction:\n\n## Filter Plugins\n\n[[making plugins#Filters|Filter plugins]] are plugins that filter out content based off of certain criteria. By default, Quartz uses the [[RemoveDrafts]] plugin which filters out any note that has `draft: true` in the frontmatter.\n\nIf you'd like to only publish a select number of notes, you can instead use [[ExplicitPublish]] which will filter out all notes except for any that have `publish: true` in the frontmatter.\n\n> [!warning]\n> Regardless of the filter plugin used, **all non-markdown files will be emitted and available publically in the final build.** This includes files such as images, voice recordings, PDFs, etc. One way to prevent this and still be able to embed local images is to create a folder specifically for public media and add the following two patterns to the ignorePatterns array.\n>\n> `\"!(PublicMedia)**/!(*.md)\", \"!(*.md)\"`\n\n## `ignorePatterns`\n\nThis is a field in `quartz.config.ts` under the main [[configuration]] which allows you to specify a list of patterns to effectively exclude from parsing all together. Any valid [fast-glob](https://github.com/mrmlnc/fast-glob#pattern-syntax) pattern works here.\n\n> [!note]\n> Bash's glob syntax is slightly different from fast-glob's and using bash's syntax may lead to unexpected results.\n\nCommon examples include:\n\n- `some/folder`: exclude the entire of `some/folder`\n- `*.md`: exclude all files with a `.md` extension\n- `!*.md` exclude all files that _don't_ have a `.md` extension\n- `**/private`: exclude any files or folders named `private` at any level of nesting\n\n> [!warning]\n> Marking something as private via either a plugin or through the `ignorePatterns` pattern will only prevent a page from being included in the final built site. If your GitHub repository is public, also be sure to include an ignore for those in the `.gitignore` of your Quartz. See the `git` [documentation](https://git-scm.com/docs/gitignore#_pattern_format) for more information.\n"
  },
  "features/recent-notes": {
    "title": "recent notes",
    "content": "---\nslug: recent-notes\ntitle: Recent Notes\ntags: component\n---\n\nQuartz can generate a list of recent notes based on some filtering and sorting criteria. Though this component isn't included in any [[layout]] by default, you can add it by using `Component.RecentNotes` in `quartz.layout.ts`.\n\n## Customization\n\n- Changing the title from \"Recent notes\": pass in an additional parameter to `Component.RecentNotes({ title: \"Recent writing\" })`\n- Changing the number of recent notes: pass in an additional parameter to `Component.RecentNotes({ limit: 5 })`\n- Display the note's tags (defaults to true): `Component.RecentNotes({ showTags: false })`\n- Show a 'see more' link: pass in an additional parameter to `Component.RecentNotes({ linkToMore: \"tags/components\" })`. This field should be a full slug to a page that exists.\n- Customize filtering: pass in an additional parameter to `Component.RecentNotes({ filter: someFilterFunction })`. The filter function should be a function that has the signature `(f: QuartzPluginData) => boolean`.\n- Customize sorting: pass in an additional parameter to `Component.RecentNotes({ sort: someSortFunction })`. By default, Quartz will sort by date and then tie break lexographically. The sort function should be a function that has the signature `(f1: QuartzPluginData, f2: QuartzPluginData) => number`. See `byDateAndAlphabetical` in `quartz/components/PageList.tsx` for an example.\n- Component: `quartz/components/RecentNotes.tsx`\n- Style: `quartz/components/styles/recentNotes.scss`\n"
  },
  "features/syntax-highlighting": {
    "title": "syntax highlighting",
    "content": "---\nslug: syntax-highlighting\ntitle: Syntax Highlighting\ntags:\n  - feature/transformer\n---\n\nSyntax highlighting in Quartz is completely done at build-time. This means that Quartz only ships pre-calculated CSS to highlight the right words so there is no heavy client-side bundle that does the syntax highlighting.\n\nAnd, unlike some client-side highlighters, it has a full TextMate parser grammar instead of using Regexes, allowing for highly accurate code highlighting.\n\nIn short, it generates HTML that looks exactly like your code in an editor like VS Code. Under the hood, it's powered by [Rehype Pretty Code](https://rehype-pretty-code.netlify.app/) which uses [Shiki](https://github.com/shikijs/shiki).\n\n> [!warning]\n> Syntax highlighting does have an impact on build speed if you have a lot of code snippets in your notes.\n\n## Formatting\n\nText inside `backticks` on a line will be formatted like code.\n\n````\n```ts\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(\"#\", 2)\n  anchor = anchor === undefined ? \"\" : \"#\" + anchor\n\n  return cleanPath + anchor\n}\n```\n````\n\n```ts\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(\"#\", 2)\n  anchor = anchor === undefined ? \"\" : \"#\" + anchor\n\n  return cleanPath + anchor\n}\n```\n\n### Titles\n\nAdd a file title to your code block, with text inside double quotes (`\"\"`):\n\n````\n```js title=\"...\"\n\n```\n````\n\n```ts title=\"quartz/path.ts\"\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(\"#\", 2)\n  anchor = anchor === undefined ? \"\" : \"#\" + anchor\n\n  return cleanPath + anchor\n}\n```\n\n### Line highlighting\n\nPlace a numeric range inside `{}`.\n\n````\n```js {1-3,4}\n\n```\n````\n\n```ts {2-3,6}\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(\"#\", 2)\n  anchor = anchor === undefined ? \"\" : \"#\" + anchor\n\n  return cleanPath + anchor\n}\n```\n\n### Word highlighting\n\nA series of characters, like a literal regex.\n\n````\n```js /useState/\nconst [age, setAge] = useState(50);\nconst [name, setName] = useState('Taylor');\n```\n````\n\n```js /useState/\nconst [age, setAge] = useState(50)\nconst [name, setName] = useState(\"Taylor\")\n```\n\n### Inline Highlighting\n\nAppend {:lang} to the end of inline code to highlight it like a regular code block.\n\n```\nThis is an array `[1, 2, 3]{:js}` of numbers 1 through 3.\n```\n\nThis is an array `[1, 2, 3]{:js}` of numbers 1 through 3.\n\n### Line numbers\n\nSyntax highlighting has line numbers configured automatically. If you want to start line numbers at a specific number, use `showLineNumbers{number}`:\n\n````\n```js showLineNumbers{number}\n\n```\n````\n\n```ts showLineNumbers{20}\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(\"#\", 2)\n  anchor = anchor === undefined ? \"\" : \"#\" + anchor\n\n  return cleanPath + anchor\n}\n```\n\n### Escaping code blocks\n\nYou can format a codeblock inside of a codeblock by wrapping it with another level of backtick fences that has one more backtick than the previous fence.\n\n`````\n````\n```js /useState/\nconst [age, setAge] = useState(50);\nconst [name, setName] = useState('Taylor');\n```\n````\n`````\n\n## Customization\n\nSyntax highlighting is a functionality of the [[SyntaxHighlighting]] plugin. See the plugin page for customization options.\n"
  },
  "features/table-of-contents": {
    "title": "table of contents",
    "content": "---\nslug: table-of-contents\ntitle: \"Table of Contents\"\ntags:\n  - component\n  - feature/transformer\n---\n\nQuartz can automatically generate a table of contents (TOC) from a list of headings on each page. It will also show you your current scrolling position on the page by highlighting headings you've scrolled through with a different color.\n\nYou can hide the TOC on a page by adding `enableToc: false` to the frontmatter for that page.\n\nBy default, the TOC shows all headings from H1 (`# Title`) to H3 (`### Title`) and is only displayed if there is more than one heading on the page.\n\n## Customization\n\nThe table of contents is a functionality of the [[TableOfContents]] plugin. See the plugin page for more customization options.\n\nIt also needs the `TableOfContents` component, which is displayed in the right sidebar by default. You can change this by customizing the [[layout]]. The TOC component can be configured with the `layout` parameter, which can either be `modern` (default) or `legacy`.\n"
  },
  "features/upcoming-features": {
    "title": "upcoming features",
    "content": "---\nslug: upcoming-features\ndraft: true\n---\n\n## high priority backlog\n\n- static dead link detection\n- block links: https://help.obsidian.md/Linking+notes+and+files/Internal+links#Link+to+a+block+in+a+note\n- note/header/block transcludes: https://help.obsidian.md/Linking+notes+and+files/Embedding+files\n- docker support\n\n## misc backlog\n\n- breadcrumbs component\n- cursor chat extension\n- https://giscus.app/ extension\n- sidenotes? https://github.com/capnfabs/paperesque\n- direct match in search using double quotes\n- https://help.obsidian.md/Advanced+topics/Using+Obsidian+URI\n- audio/video embed styling\n- Canvas\n- parse all images in page: use this for page lists if applicable?\n- CV mode? with print stylesheet\n"
  },
  "features/wikilinks": {
    "title": "wikilinks",
    "content": "---\nslug: wikilinks\ntitle: Wikilinks\n---\n\nWikilinks were pioneered by earlier internet wikis to make it easier to write links across pages without needing to write Markdown or HTML links each time.\n\nQuartz supports Wikilinks by default and these links are resolved by Quartz using the [[CrawlLinks]] plugin. See the [Obsidian Help page on Internal Links](https://help.obsidian.md/Linking+notes+and+files/Internal+links) for more information on Wikilink syntax.\n\nThis is enabled as a part of [[Obsidian compatibility]] and can be configured and enabled/disabled from that plugin.\n\n## Syntax\n\n- `[[Path to file]]`: produces a link to `Path to file.md` (or `Path-to-file.md`) with the text `Path to file`\n- `[[Path to file | Here's the title override]]`: produces a link to `Path to file.md` with the text `Here's the title override`\n- `[[Path to file#Anchor]]`: produces a link to the anchor `Anchor` in the file `Path to file.md`\n- `[[Path to file#^block-ref]]`: produces a link to the specific block `block-ref` in the file `Path to file.md`\n\n### Embeds\n\n- `![[Path to image]]`: embeds an image into the page\n- `![[Path to image|100x145]]`: embeds an image into the page with dimensions 100px by 145px\n- `![[Path to file]]`: transclude an entire page\n- `![[Path to file#Anchor]]`: transclude everything under the header `Anchor`\n- `![[Path to file#^b15695]]`: transclude block with ID `^b15695`\n"
  },
  "hosting": {
    "title": "hosting",
    "content": "---\nslug: hosting\ntitle: Hosting\n---\n\nQuartz effectively turns your Markdown files and other resources into a bundle of HTML, JS, and CSS files (a website!).\n\nHowever, if you'd like to publish your site to the world, you need a way to host it online. This guide will detail how to deploy with common hosting providers but any service that allows you to deploy static HTML should work as well.\n\n> [!warning]\n> The rest of this guide assumes that you've already created your own GitHub repository for Quartz. If you haven't already, [[setting up your GitHub repository|make sure you do so]].\n\n> [!hint]\n> Some Quartz features (like [[RSS Feed]] and sitemap generation) require `baseUrl` to be configured properly in your [[configuration]] to work properly. Make sure you set this before deploying!\n\n## Cloudflare Pages\n\n1. Log in to the [Cloudflare dashboard](https://dash.cloudflare.com/) and select your account.\n2. In Account Home, select **Workers & Pages** > **Create application** > **Pages** > **Connect to Git**.\n3. Select the new GitHub repository that you created and, in the **Set up builds and deployments** section, provide the following information:\n\n| Configuration option   | Value              |\n| ---------------------- | ------------------ |\n| Production branch      | `v4`               |\n| Framework preset       | `None`             |\n| Build command          | `npx quartz build` |\n| Build output directory | `public`           |\n\nPress \"Save and deploy\" and Cloudflare should have a deployed version of your site in about a minute. Then, every time you sync your Quartz changes to GitHub, your site should be updated.\n\nTo add a custom domain, check out [Cloudflare's documentation](https://developers.cloudflare.com/pages/platform/custom-domains/).\n\n> [!warning]\n> Cloudflare Pages performs a shallow clone by default, so if you rely on `git` for timestamps, it is recommended that you add `git fetch --unshallow &&` to the beginning of the build command (e.g., `git fetch --unshallow && npx quartz build`).\n\n## GitHub Pages\n\nIn your local Quartz, create a new file `quartz/.github/workflows/deploy.yml`.\n\n```yaml title=\"quartz/.github/workflows/deploy.yml\"\nname: Deploy Quartz site to GitHub Pages\n\non:\n  push:\n    branches:\n      - v4\n\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: false\n\njobs:\n  build:\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0 # Fetch all history for git info\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18.14\n      - name: Install Dependencies\n        run: npm ci\n      - name: Build Quartz\n        run: npx quartz build\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v2\n        with:\n          path: public\n\n  deploy:\n    needs: build\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v2\n```\n\nThen:\n\n1. Head to \"Settings\" tab of your forked repository and in the sidebar, click \"Pages\". Under \"Source\", select \"GitHub Actions\".\n2. Commit these changes by doing `npx quartz sync`. This should deploy your site to `<github-username>.github.io/<repository-name>`.\n\n> [!hint]\n> If you get an error about not being allowed to deploy to `github-pages` due to environment protection rules, make sure you remove any existing GitHub pages environments.\n>\n> You can do this by going to your Settings page on your GitHub fork and going to the Environments tab and pressing the trash icon. The GitHub action will recreate the environment for you correctly the next time you sync your Quartz.\n\n> [!info]\n> Quartz generates files in the format of `file.html` instead of `file/index.html` which means the trailing slashes for _non-folder paths_ are dropped. As GitHub pages does not do this redirect, this may cause existing links to your site that use trailing slashes to break. If not breaking existing links is important to you (e.g. you are migrating from Quartz 3), consider using [[#Cloudflare Pages]].\n\n### Custom Domain\n\nHere's how to add a custom domain to your GitHub pages deployment.\n\n1. Head to the \"Settings\" tab of your forked repository.\n2. In the \"Code and automation\" section of the sidebar, click \"Pages\".\n3. Under \"Custom Domain\", type your custom domain and click \"Save\".\n4. This next step depends on whether you are using an apex domain (`example.com`) or a subdomain (`subdomain.example.com`).\n   - If you are using an apex domain, navigate to your DNS provider and create an `A` record that points your apex domain to GitHub's name servers which have the following IP addresses:\n     - `185.199.108.153`\n     - `185.199.109.153`\n     - `185.199.110.153`\n     - `185.199.111.153`\n   - If you are using a subdomain, navigate to your DNS provider and create a `CNAME` record that points your subdomain to the default domain for your site. For example, if you want to use the subdomain `quartz.example.com` for your user site, create a `CNAME` record that points `quartz.example.com` to `<github-username>.github.io`.\n\n![[dns records.png]]_The above shows a screenshot of Google Domains configured for both `jzhao.xyz` (an apex domain) and `quartz.jzhao.xyz` (a subdomain)._\n\nSee the [GitHub documentation](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-a-subdomain) for more detail about how to setup your own custom domain with GitHub Pages.\n\n> [!question] Why aren't my changes showing up?\n> There could be many different reasons why your changes aren't showing up but the most likely reason is that you forgot to push your changes to GitHub.\n>\n> Make sure you save your changes to Git and sync it to GitHub by doing `npx quartz sync`. This will also make sure to pull any updates you may have made from other devices so you have them locally.\n\n## Vercel\n\n### Fix URLs\n\nBefore deploying to Vercel, a `vercel.json` file is required at the root of the project directory. It needs to contain the following configuration so that URLs don't require the `.html` extension:\n\n```json title=\"vercel.json\"\n{\n  \"cleanUrls\": true\n}\n```\n\n### Deploy to Vercel\n\n1. Log in to the [Vercel Dashboard](https://vercel.com/dashboard) and click \"Add New...\" > Project\n2. Import the Git repository containing your Quartz project.\n3. Give the project a name (lowercase characters and hyphens only)\n4. Check that these configuration options are set:\n\n| Configuration option                      | Value              |\n| ----------------------------------------- | ------------------ |\n| Framework Preset                          | `Other`            |\n| Root Directory                            | `./`               |\n| Build and Output Settings > Build Command | `npx quartz build` |\n\n5. Press Deploy. Once it's live, you'll have 2 `*.vercel.app` URLs to view the page.\n\n### Custom Domain\n\n> [!note]\n> If there is something already hosted on the domain, these steps will not work without replacing the previous content. As a workaround, you could use Next.js rewrites or use the next section to create a subdomain.\n\n1. Update the `baseUrl` in `quartz.config.js` if necessary.\n2. Go to the [Domains - Dashboard](https://vercel.com/dashboard/domains) page in Vercel.\n3. Connect the domain to Vercel\n4. Press \"Add\" to connect a custom domain to Vercel.\n5. Select your Quartz repository and press Continue.\n6. Enter the domain you want to connect it to.\n7. Follow the instructions to update your DNS records until you see \"Valid Configuration\"\n\n### Use a Subdomain\n\nUsing `docs.example.com` is an example of a subdomain. They're a simple way of connecting multiple deployments to one domain.\n\n1. Update the `baseUrl` in `quartz.config.js` if necessary.\n2. Ensure your domain has been added to the [Domains - Dashboard](https://vercel.com/dashboard/domains) page in Vercel.\n3. Go to the [Vercel Dashboard](https://vercel.com/dashboard) and select your Quartz project.\n4. Go to the Settings tab and then click Domains in the sidebar\n5. Enter your subdomain into the field and press Add\n\n## Netlify\n\n1. Log in to the [Netlify dashboard](https://app.netlify.com/) and click \"Add new site\".\n2. Select your Git provider and repository containing your Quartz project.\n3. Under \"Build command\", enter `npx quartz build`.\n4. Under \"Publish directory\", enter `public`.\n5. Press Deploy. Once it's live, you'll have a `*.netlify.app` URL to view the page.\n6. To add a custom domain, check \"Domain management\" in the left sidebar, just like with Vercel.\n\n## GitLab Pages\n\nIn your local Quartz, create a new file `.gitlab-ci.yaml`.\n\n```yaml title=\".gitlab-ci.yaml\"\nstages:\n  - build\n  - deploy\n\nvariables:\n  NODE_VERSION: \"18.14\"\n\nbuild:\n  stage: build\n  rules:\n    - if: '$CI_COMMIT_REF_NAME == \"v4\"'\n  before_script:\n    - apt-get update -q && apt-get install -y nodejs npm\n    - npm install -g n\n    - n $NODE_VERSION\n    - hash -r\n    - npm ci\n  script:\n    - npx quartz build\n  artifacts:\n    paths:\n      - public\n  cache:\n    paths:\n      - ~/.npm/\n    key: \"${CI_COMMIT_REF_SLUG}-node-${CI_COMMIT_REF_NAME}\"\n  tags:\n    - docker\n\npages:\n  stage: deploy\n  rules:\n    - if: '$CI_COMMIT_REF_NAME == \"v4\"'\n  script:\n    - echo \"Deploying to GitLab Pages...\"\n  artifacts:\n    paths:\n      - public\n```\n\nWhen `.gitlab-ci.yaml` is committed, GitLab will build and deploy the website as a GitLab Page. You can find the url under `Deploy > Pages` in the sidebar.\n\nBy default, the page is private and only visible when logged in to a GitLab account with access to the repository but can be opened in the settings under `Deploy` -> `Pages`.\n\n## Self-Hosting\n\nCopy the `public` directory to your web server and configure it to serve the files. You can use any web server to host your site. Since Quartz generates links that do not include the `.html` extension, you need to let your web server know how to deal with it.\n\n### Using Nginx\n\nHere's an example of how to do this with Nginx:\n\n```nginx title=\"nginx.conf\"\nserver {\n    listen 80;\n    server_name example.com;\n    root /path/to/quartz/public;\n    index index.html;\n    error_page 404 /404.html;\n\n    location / {\n        try_files $uri $uri.html $uri/ =404;\n    }\n}\n```\n\n### Using Caddy\n\nHere's and example of how to do this with Caddy:\n\n```caddy title=\"Caddyfile\"\nexample.com {\n    root * /path/to/quartz/public\n    try_files {path} {path}.html {path}/ =404\n    file_server\n    encode gzip\n\n    handle_errors {\n        rewrite * /{err.status_code}.html\n        file_server\n    }\n}\n```\n"
  },
  "index": {
    "title": "index",
    "content": "---\nslug: index\ntitle: Welcome to Quartz 4\n---\n\nQuartz is a fast, batteries-included static-site generator that transforms Markdown content into fully functional websites. Thousands of students, developers, and teachers are [[showcase|already using Quartz]] to publish personal notes, websites, and [digital gardens](https://jzhao.xyz/posts/networked-thought) to the web.\n\n## 🪴 Get Started\n\nQuartz requires **at least [Node](https://nodejs.org/) v18.14** and `npm` v9.3.1 to function correctly. Ensure you have this installed on your machine before continuing.\n\nThen, in your terminal of choice, enter the following commands line by line:\n\n```shell\ngit clone https://github.com/jackyzha0/quartz.git\ncd quartz\nnpm i\nnpx quartz create\n```\n\n<h1>yeah wowowoowowkekekwkekwkek</h1>\n\nThis will guide you through initializing your Quartz with content. Once you've done so, see how to:\n\n1. [[authoring content|Writing content]] in Quartz\n2. [[configuration|Configure]] Quartz's behaviour\n3. Change Quartz's [[layout]]\n4. [[build|Build and preview]] Quartz\n5. Sync your changes with [[setting up your GitHub repository|GitHub]]\n6. [[hosting|Host]] Quartz online\n\nIf you prefer instructions in a video format you can try following Nicole van der Hoeven's\n[video guide on how to set up Quartz!](https://www.youtube.com/watch?v=6s6DT1yN4dw&t=227s)\n\n## 🔧 Features\n\n- [[Obsidian compatibility]], [[full-text search]], [[graph view]], note transclusion, [[wikilinks]], [[backlinks]], [[features/Latex|Latex]], [[syntax highlighting]], [[popover previews]], [[Docker Support]], [[i18n|internationalization]] and [many more](./features) right out of the box\n- Hot-reload for both configuration and content\n- Simple JSX layouts and [[creating components|page components]]\n- [[SPA Routing|Ridiculously fast page loads]] and tiny bundle sizes\n- Fully-customizable parsing, filtering, and page generation through [[making plugins|plugins]]\n\nFor a comprehensive list of features, visit the [features page](/features). You can read more about the _why_ behind these features on the [[philosophy]] page and a technical overview on the [[architecture]] page.\n\n### 🚧 Troubleshooting + Updating\n\nHaving trouble with Quartz? Try searching for your issue using the search feature. If you haven't already, [[upgrading|upgrade]] to the newest version of Quartz to see if this fixes your issue.\n\nIf you're still having trouble, feel free to [submit an issue](https://github.com/jackyzha0/quartz/issues) if you feel you found a bug or ask for help in our [Discord Community](https://discord.gg/cRFFHYye7t).\n\n "
  },
  "layout": {
    "title": "layout",
    "content": "---\nslug: layout\ntitle: Layout\n---\n\nCertain emitters may also output [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML) files. To enable easy customization, these emitters allow you to fully rearrange the layout of the page. The default page layouts can be found in `quartz.layout.ts`.\n\nEach page is composed of multiple different sections which contain `QuartzComponents`. The following code snippet lists all of the valid sections that you can add components to:\n\n```typescript title=\"quartz/cfg.ts\"\nexport interface FullPageLayout {\n  head: QuartzComponent // single component\n  header: QuartzComponent[] // laid out horizontally\n  beforeBody: QuartzComponent[] // laid out vertically\n  pageBody: QuartzComponent // single component\n  left: QuartzComponent[] // vertical on desktop, horizontal on mobile\n  right: QuartzComponent[] // vertical on desktop, horizontal on mobile\n  footer: QuartzComponent // single component\n}\n```\n\nThese correspond to following parts of the page:\n\n![[quartz layout.png|800]]\n\n> [!note]\n> There are two additional layout fields that are _not_ shown in the above diagram.\n>\n> 1. `head` is a single component that renders the `<head>` [tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head) in the HTML. This doesn't appear visually on the page and is only is responsible for metadata about the document like the tab title, scripts, and styles.\n> 2. `header` is a set of components that are laid out horizontally and appears _before_ the `beforeBody` section. This enables you to replicate the old Quartz 3 header bar where the title, search bar, and dark mode toggle. By default, Quartz 4 doesn't place any components in the `header`.\n\nQuartz **components**, like plugins, can take in additional properties as configuration options. If you're familiar with React terminology, you can think of them as Higher-order Components.\n\nSee [a list of all the components](component.md) for all available components along with their configuration options. You can also checkout the guide on [[creating components]] if you're interested in further customizing the behaviour of Quartz.\n\n### Style\n\nMost meaningful style changes like colour scheme and font can be done simply through the [[configuration#General Configuration|general configuration]] options. However, if you'd like to make more involved style changes, you can do this by writing your own styles. Quartz 4, like Quartz 3, uses [Sass](https://sass-lang.com/guide/) for styling.\n\nYou can see the base style sheet in `quartz/styles/base.scss` and write your own in `quartz/styles/custom.scss`.\n\n> [!note]\n> Some components may provide their own styling as well! For example, `quartz/components/Darkmode.tsx` imports styles from `quartz/components/styles/darkmode.scss`. If you'd like to customize styling for a specific component, double check the component definition to see how its styles are defined.\n"
  },
  "migrating-from-Quartz-3": {
    "title": "migrating from Quartz 3",
    "content": "---\nslug: migrating-from-Quartz-3\ntitle: \"Migrating from Quartz 3\"\n---\n\nAs you already have Quartz locally, you don't need to fork or clone it again. Simply just checkout the alpha branch, install the dependencies, and import your old vault.\n\n```bash\ngit fetch\ngit checkout v4\ngit pull upstream v4\nnpm i\nnpx quartz create\n```\n\nIf you get an error like `fatal: 'upstream' does not appear to be a git repository`, make sure you add `upstream` as a remote origin:\n\n```shell\ngit remote add upstream https://github.com/jackyzha0/quartz.git\n```\n\nWhen running `npx quartz create`, you will be prompted as to how to initialize your content folder. Here, you can choose to import or link your previous content folder and Quartz should work just as you expect it to.\n\n> [!note]\n> If the existing content folder you'd like to use is at the _same_ path on a different branch, clone the repo again somewhere at a _different_ path in order to use it.\n>wow cool\n\n## Key changes\n\n1. **Removing Hugo and `hugo-obsidian`**: Hugo worked well for earlier versions of Quartz but it also made it hard for people outside of the Golang and Hugo communities to fully understand what Quartz was doing under the hood and be able to properly customize it to their needs. Quartz 4 now uses a Node-based static-site generation process which should lead to a much more helpful error messages and an overall smoother user experience.\n2. **Full-hot reload**: The many rough edges of how `hugo-obsidian` integrated with Hugo meant that watch mode didn't re-trigger `hugo-obsidian` to update the content index. This lead to a lot of weird cases where the watch mode output wasn't accurate. Quartz 4 now uses a cohesive parse, filter, and emit pipeline which gets run on every change so hot-reloads are always accurate.\n3. **Replacing Go template syntax with JSX**: Quartz 3 used [Go templates](https://pkg.go.dev/text/template) to create layouts for pages. However, the syntax isn't great for doing any sort of complex rendering (like [text processing](https://github.com/jackyzha0/quartz/blob/hugo/layouts/partials/textprocessing.html)) and it got very difficult to make any meaningful layout changes to Quartz 3. Quartz 4 uses an extension of JavaScript syntax called JSX which allows you to write layout code that looks like HTML in JavaScript which is significantly easier to understand and maintain.\n4. **A new extensible [[configuration]] and [[configuration#Plugins|plugin]] system**: Quartz 3 was hard to configure without technical knowledge of how Hugo's partials worked. Extensions were even hard to make. Quartz 4's configuration and plugin system is designed to be extended by users while making updating to new versions of Quartz easy.\n\n## Things to update\n\n- You will need to update your deploy scripts. See the [[hosting]] guide for more details.\n- Ensure that your default branch on GitHub is updated from `hugo` to `v4`.\n- [[folder and tag listings|Folder and tag listings]] have also changed.\n  - Folder descriptions should go under `content/<folder-name>/index.md` where `<folder-name>` is the name of the folder.\n  - Tag descriptions should go under `content/tags/<tag-name>.md` where `<tag-name>` is the name of the tag.\n- Some HTML layout may not be the same between Quartz 3 and Quartz 4. If you depended on a particular HTML hierarchy or class names, you may need to update your custom CSS to reflect these changes.\n- If you customized the layout of Quartz 3, you may need to translate these changes from Go templates back to JSX as Quartz 4 no longer uses Hugo. For components, check out the guide on [[creating components]] for more details on this.\n"
  },
  "philosophy": {
    "title": "philosophy",
    "content": "---\nslug: philosophy\ntitle: Philosophy of Quartz\n---\n\n## A garden should be a true hypertext\n\n> The garden is the web as topology. Every walk through the garden creates new paths, new meanings, and when we add things to the garden we add them in a way that allows many future, unpredicted relationships.\n>\n> _(The Garden and the Stream)_\n\nThe problem with the file cabinet is that it focuses on efficiency of access and interoperability rather than generativity and creativity. Thinking is not linear, nor is it hierarchical. In fact, not many things are linear or hierarchical at all. Then why is it that most tools and thinking strategies assume a nice chronological or hierarchical order for my thought processes?\n\nThe ideal tool for thought for me would embrace the messiness of my mind, and organically help insights emerge from chaos instead of forcing an artificial order. A rhizomatic, not arboresecent, form of note taking.\n\nMy goal with a digital garden is not purely as an organizing system and information store (though it works nicely for that). I want my digital garden to be a playground for new ways ideas can connect together. As a result, existing formal organizing systems like Zettelkasten or the hierarchical folder structures of Notion don’t work well for me. There is way too much upfront friction that by the time I’ve thought about how to organize my thought into folders categories, I’ve lost it.\n\nQuartz embraces the inherent rhizomatic and web-like nature of our thinking and tries to encourage note-taking in a similar form.\n\n---\n\n## A garden should be shared\n\nThe goal of digital gardening should be to tap into your network’s collective intelligence to create constructive feedback loops. If done well, I have a shareable representation of my thoughts that I can send out into the world and people can respond. Even for my most half-baked thoughts, this helps me create a feedback cycle to strengthen and fully flesh out that idea.\n\nQuartz is designed first and foremost as a tool for publishing [digital gardens](https://jzhao.xyz/posts/networked-thought) to the web. To me, digital gardening is not just passive knowledge collection. It’s a form of expression and sharing.\n\n> “[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.”\n> — Richard Hamming\n\n**The goal of Quartz is to make sharing your digital garden free and simple.**\n\n---\n\n## A garden should be your own\n\nAt its core, Quartz is designed to be easy to use enough for non-technical people to get going but also powerful enough that senior developers can tweak it to work how they'd like it to work.\n\n1. If you like the default configuration of Quartz and just want to change the content, the only thing that you need to change is the contents of the `content` folder.\n2. If you'd like to make basic configuration tweaks but don't want to edit source code, one can tweak the plugins and components in `quartz.config.ts` and `quartz.layout.ts` in a guided manner to their liking.\n3. If you'd like to tweak the actual source code of the underlying plugins, components, or even build process, Quartz purposefully ships its full source code to the end user to allow customization at this level too.\n\nMost software either confines you to either\n\n1. Makes it easy to tweak content but not the presentation\n2. Gives you too many knobs to tune the presentation without good opinionated defaults\n\n**Quartz should feel powerful but ultimately be an intuitive tool fully within your control.** It should be a piece of [agentic software](https://jzhao.xyz/posts/agentic-computing). Ultimately, it should have the right affordances to nudge users towards good defaults but never dictate what the 'correct' way of using it is.\n"
  },
  "plugins/AliasRedirects": {
    "title": "AliasRedirects",
    "content": "---\nslug: AliasRedirects\ntitle: AliasRedirects\ntags:\n  - plugin/emitter\n---\n\nThis plugin emits HTML redirect pages for aliases and permalinks defined in the frontmatter of content files.\n\nFor example, A `foo.md` has the following frontmatter\n\n```md title=\"foo.md\"\n---\ntitle: \"Foo\"\nalias:\n  - \"bar\"\n---\n```\n\nThe target `host.me/bar` will be redirected to `host.me/foo`\n\nNote that these are permanent redirect.\n\nThe emitter supports the following aliases:\n\n- `aliases`\n- `alias`\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin has no configuration options.\n\n## API\n\n- Category: Emitter\n- Function name: `Plugin.AliasRedirects()`.\n- Source: [`quartz/plugins/emitters/aliases.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/emitters/aliases.ts).\n"
  },
  "plugins/Assets": {
    "title": "Assets",
    "content": "---\nslug: Assets\ntitle: Assets\ntags:\n  - plugin/emitter\n---\n\nThis plugin emits all non-Markdown static assets in your content folder (like images, videos, HTML, etc). The plugin respects the `ignorePatterns` in the global [[configuration]].\n\nNote that all static assets will then be accessible through its path on your generated site, i.e: `host.me/path/to/static.pdf`\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin has no configuration options.\n\n## API\n\n- Category: Emitter\n- Function name: `Plugin.Assets()`.\n- Source: [`quartz/plugins/emitters/assets.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/emitters/assets.ts).\n"
  },
  "plugins/CNAME": {
    "title": "CNAME",
    "content": "---\nslug: CNAME\ntitle: CNAME\ntags:\n  - plugin/emitter\n---\n\nThis plugin emits a `CNAME` record that points your subdomain to the default domain of your site.\n\nIf you want to use a custom domain name like `quartz.example.com` for the site, then this is needed.\n\nSee [[hosting|Hosting]] for more information.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin has no configuration options.\n\n## API\n\n- Category: Emitter\n- Function name: `Plugin.CNAME()`.\n- Source: [`quartz/plugins/emitters/cname.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/emitters/cname.ts).\n"
  },
  "plugins/ComponentResources": {
    "title": "ComponentResources",
    "content": "---\nslug: ComponentResources\ntitle: ComponentResources\ntags:\n  - plugin/emitter\n---\n\nThis plugin manages and emits the static resources required for the Quartz framework. This includes CSS stylesheets and JavaScript scripts that enhance the functionality and aesthetics of the generated site. See also the `cdnCaching` option in the `theme` section of the [[configuration]].\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin has no configuration options.\n\n## API\n\n- Category: Emitter\n- Function name: `Plugin.ComponentResources()`.\n- Source: [`quartz/plugins/emitters/componentResources.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/emitters/componentResources.ts).\n"
  },
  "plugins/ContentIndex": {
    "title": "ContentIndex",
    "content": "---\nslug: ContentIndex\ntitle: ContentIndex\ntags:\n  - plugin/emitter\n---\n\nThis plugin emits both RSS and an XML sitemap for your site. The [[RSS Feed]] allows users to subscribe to content on your site and the sitemap allows search engines to better index your site. The plugin also emits a `contentIndex.json` file which is used by dynamic frontend components like search and graph.\n\nThis plugin emits a comprehensive index of the site's content, generating additional resources such as a sitemap, an RSS feed, and a\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin accepts the following configuration options:\n\n- `enableSiteMap`: If `true` (default), generates a sitemap XML file (`sitemap.xml`) listing all site URLs for search engines in content discovery.\n- `enableRSS`: If `true` (default), produces an RSS feed (`index.xml`) with recent content updates.\n- `rssLimit`: Defines the maximum number of entries to include in the RSS feed, helping to focus on the most recent or relevant content. Defaults to `10`.\n- `rssFullHtml`: If `true`, the RSS feed includes full HTML content. Otherwise it includes just summaries.\n- `includeEmptyFiles`: If `true` (default), content files with no body text are included in the generated index and resources.\n\n## API\n\n- Category: Emitter\n- Function name: `Plugin.ContentIndex()`.\n- Source: [`quartz/plugins/emitters/contentIndex.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/emitters/contentIndex.ts).\n"
  },
  "plugins/ContentPage": {
    "title": "ContentPage",
    "content": "---\nslug: ContentPage\ntitle: ContentPage\ntags:\n  - plugin/emitter\n---\n\nThis plugin is a core component of the Quartz framework. It generates the HTML pages for each piece of Markdown content. It emits the full-page [[layout]], including headers, footers, and body content, among others.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin has no configuration options.\n\n## API\n\n- Category: Emitter\n- Function name: `Plugin.ContentPage()`.\n- Source: [`quartz/plugins/emitters/contentPage.tsx`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/emitters/contentPage.tsx).\n"
  },
  "plugins/CrawlLinks": {
    "title": "CrawlLinks",
    "content": "---\nslug: CrawlLinks\ntitle: CrawlLinks\ntags:\n  - plugin/transformer\n---\n\nThis plugin parses links and processes them to point to the right places. It is also needed for embedded links (like images). See [[Obsidian compatibility]] for more information.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin accepts the following configuration options:\n\n- `markdownLinkResolution`: Sets the strategy for resolving Markdown paths, can be `\"absolute\"` (default), `\"relative\"` or `\"shortest\"`. You should use the same setting here as in [[Obsidian compatibility|Obsidian]].\n  - `absolute`: Path relative to the root of the content folder.\n  - `relative`: Path relative to the file you are linking from.\n  - `shortest`: Name of the file. If this isn't enough to identify the file, use the full absolute path.\n- `prettyLinks`: If `true` (default), simplifies links by removing folder paths, making them more user friendly (e.g. `folder/deeply/nested/note` becomes `note`).\n- `openLinksInNewTab`: If `true`, configures external links to open in a new tab. Defaults to `false`.\n- `lazyLoad`: If `true`, adds lazy loading to resource elements (`img`, `video`, etc.) to improve page load performance. Defaults to `false`.\n- `externalLinkIcon`: Adds an icon next to external links when `true` (default) to visually distinguishing them from internal links.\n\n> [!warning]\n> Removing this plugin is _not_ recommended and will likely break the page.\n\n## API\n\n- Category: Transformer\n- Function name: `Plugin.CrawlLinks()`.\n- Source: [`quartz/plugins/transformers/links.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/transformers/links.ts).\n"
  },
  "plugins/CreatedModifiedDate": {
    "title": "CreatedModifiedDate",
    "content": "---\nslug: CreatedModifiedDate\ntitle: \"CreatedModifiedDate\"\ntags:\n  - plugin/transformer\n---\n\nThis plugin determines the created, modified, and published dates for a document using three potential data sources: frontmatter metadata, Git history, and the filesystem. See [[authoring content#Syntax]] for more information.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin accepts the following configuration options:\n\n- `priority`: The data sources to consult for date information. Highest priority first. Possible values are `\"frontmatter\"`, `\"git\"`, and `\"filesystem\"`. Defaults to `\"frontmatter\", \"git\", \"filesystem\"]`.\n\n> [!warning]\n> If you rely on `git` for dates, make sure `defaultDateType` is set to `modified` in `quartz.config.ts`.\n>\n> Depending on how you [[hosting|host]] your Quartz, the `filesystem` dates of your local files may not match the final dates. In these cases, it may be better to use `git` or `frontmatter` to guarantee correct dates.\n\n## API\n\n- Category: Transformer\n- Function name: `Plugin.CreatedModifiedDate()`.\n- Source: [`quartz/plugins/transformers/lastmod.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/transformers/lastmod.ts).\n"
  },
  "plugins/Description": {
    "title": "Description",
    "content": "---\nslug: Description\ntitle: Description\ntags:\n  - plugin/transformer\n---\n\nThis plugin generates descriptions that are used as metadata for the HTML `head`, the [[RSS Feed]] and in [[folder and tag listings]] if there is no main body content, the description is used as the text between the title and the listing.\n\nIf the frontmatter contains a `description` property, it is used (see [[authoring content#Syntax]]). Otherwise, the plugin will do its best to use the first few sentences of the content to reach the target description length.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin accepts the following configuration options:\n\n- `descriptionLength`: the maximum length of the generated description. Default is 150 characters. The cut off happens after the first _sentence_ that ends after the given length.\n- `replaceExternalLinks`: If `true` (default), replace external links with their domain and path in the description (e.g. `https://domain.tld/some_page/another_page?query=hello&target=world` is replaced with `domain.tld/some_page/another_page`).\n\n## API\n\n- Category: Transformer\n- Function name: `Plugin.Description()`.\n- Source: [`quartz/plugins/transformers/description.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/transformers/description.ts).\n"
  },
  "plugins/ExplicitPublish": {
    "title": "ExplicitPublish",
    "content": "---\nslug: ExplicitPublish\ntitle: ExplicitPublish\ntags:\n  - plugin/filter\n---\n\nThis plugin filters content based on an explicit `publish` flag in the frontmatter, allowing only content that is explicitly marked for publication to pass through. It's the opt-in version of [[RemoveDrafts]]. See [[private pages]] for more information.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin has no configuration options.\n\n## API\n\n- Category: Filter\n- Function name: `Plugin.ExplicitPublish()`.\n- Source: [`quartz/plugins/filters/explicit.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/filters/explicit.ts).\n"
  },
  "plugins/FolderPage": {
    "title": "FolderPage",
    "content": "---\nslug: FolderPage\ntitle: FolderPage\ntags:\n  - plugin/emitter\n---\n\nThis plugin generates index pages for folders, creating a listing page for each folder that contains multiple content files. See [[folder and tag listings]] for more information.\n\nExample: [[advanced/|Advanced]]\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin has no configuration options.\n\nThe pages are displayed using the `defaultListPageLayout` in `quartz.layouts.ts`. For the content, the `FolderContent` component is used. If you want to modify the layout, you must edit it directly (`quartz/components/pages/FolderContent.tsx`).\n\n## API\n\n- Category: Emitter\n- Function name: `Plugin.FolderPage()`.\n- Source: [`quartz/plugins/emitters/folderPage.tsx`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/emitters/folderPage.tsx).\n"
  },
  "plugins/Frontmatter": {
    "title": "Frontmatter",
    "content": "---\nslug: Frontmatter\ntitle: \"Frontmatter\"\ntags:\n  - plugin/transformer\n---\n\nThis plugin parses the frontmatter of the page using the [gray-matter](https://github.com/jonschlinkert/gray-matter) library. See [[authoring content#Syntax]], [[Obsidian compatibility]] and [[OxHugo compatibility]] for more information.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin accepts the following configuration options:\n\n- `delimiters`: the delimiters to use for the frontmatter. Can have one value (e.g. `\"---\"`) or separate values for opening and closing delimiters (e.g. `[\"---\", \"~~~\"]`). Defaults to `\"---\"`.\n- `language`: the language to use for parsing the frontmatter. Can be `yaml` (default) or `toml`.\n\n> [!warning]\n> This plugin must not be removed, otherwise Quartz will break.\n\n## API\n\n- Category: Transformer\n- Function name: `Plugin.Frontmatter()`.\n- Source: [`quartz/plugins/transformers/frontmatter.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/transformers/frontmatter.ts).\n"
  },
  "plugins/GitHubFlavoredMarkdown": {
    "title": "GitHubFlavoredMarkdown",
    "content": "---\nslug: GitHubFlavoredMarkdown\ntitle: GitHubFlavoredMarkdown\ntags:\n  - plugin/transformer\n---\n\nThis plugin enhances Markdown processing to support GitHub Flavored Markdown (GFM) which adds features like autolink literals, footnotes, strikethrough, tables and tasklists.\n\nIn addition, this plugin adds optional features for typographic refinement (such as converting straight quotes to curly quotes, dashes to en-dashes/em-dashes, and ellipses) and automatic heading links as a symbol that appears next to the heading on hover.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin accepts the following configuration options:\n\n- `enableSmartyPants`: When true, enables typographic enhancements. Default is true.\n- `linkHeadings`: When true, automatically adds links to headings. Default is true.\n\n## API\n\n- Category: Transformer\n- Function name: `Plugin.GitHubFlavoredMarkdown()`.\n- Source: [`quartz/plugins/transformers/gfm.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/transformers/gfm.ts).\n"
  },
  "plugins/HardLineBreaks": {
    "title": "HardLineBreaks",
    "content": "---\nslug: HardLineBreaks\ntitle: HardLineBreaks\ntags:\n  - plugin/transformer\n---\n\nThis plugin automatically converts single line breaks in Markdown text into hard line breaks in the HTML output. This plugin is not enabled by default as this doesn't follow the semantics of actual Markdown but you may enable it if you'd like parity with [[Obsidian compatibility|Obsidian]].\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin has no configuration options.\n\n## API\n\n- Category: Transformer\n- Function name: `Plugin.HardLineBreaks()`.\n- Source: [`quartz/plugins/transformers/linebreaks.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/transformers/linebreaks.ts).\n"
  },
  "plugins/Latex": {
    "title": "Latex",
    "content": "---\nslug: Latex\ntitle: \"Latex\"\ntags:\n  - plugin/transformer\n---\n\nThis plugin adds LaTeX support to Quartz. See [[features/Latex|Latex]] for more information.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin accepts the following configuration options:\n\n- `renderEngine`: the engine to use to render LaTeX equations. Can be `\"katex\"` for [KaTeX](https://katex.org/) or `\"mathjax\"` for [MathJax](https://www.mathjax.org/) [SVG rendering](https://docs.mathjax.org/en/latest/output/svg.html). Defaults to KaTeX.\n\n## API\n\n- Category: Transformer\n- Function name: `Plugin.Latex()`.\n- Source: [`quartz/plugins/transformers/latex.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/transformers/latex.ts).\n"
  },
  "plugins/NotFoundPage": {
    "title": "NotFoundPage",
    "content": "---\nslug: NotFoundPage\ntitle: NotFoundPage\ntags:\n  - plugin/emitter\n---\n\nThis plugin emits a 404 (Not Found) page for broken or non-existent URLs.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin has no configuration options.\n\n## API\n\n- Category: Emitter\n- Function name: `Plugin.NotFoundPage()`.\n- Source: [`quartz/plugins/emitters/404.tsx`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/emitters/404.tsx).\n"
  },
  "plugins/ObsidianFlavoredMarkdown": {
    "title": "ObsidianFlavoredMarkdown",
    "content": "---\nslug: ObsidianFlavoredMarkdown\ntitle: ObsidianFlavoredMarkdown\ntags:\n  - plugin/transformer\n---\n\nThis plugin provides support for [[Obsidian compatibility]].\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin accepts the following configuration options:\n\n- `comments`: If `true` (default), enables parsing of `%%` style Obsidian comment blocks.\n- `highlight`: If `true` (default), enables parsing of `==` style highlights within content.\n- `wikilinks`:If `true` (default), turns [[wikilinks]] into regular links.\n- `callouts`: If `true` (default), adds support for [[callouts|callout]] blocks for emphasizing content.\n- `mermaid`: If `true` (default), enables [[Mermaid diagrams|Mermaid diagram]] rendering within Markdown files.\n- `parseTags`: If `true` (default), parses and links tags within the content.\n- `parseArrows`: If `true` (default), transforms arrow symbols into their HTML character equivalents.\n- `parseBlockReferences`: If `true` (default), handles block references, linking to specific content blocks.\n- `enableInHtmlEmbed`: If `true`, allows embedding of content directly within HTML. Defaults to `false`.\n- `enableYouTubeEmbed`: If `true` (default), enables the embedding of YouTube videos and playlists using external image Markdown syntax.\n- `enableVideoEmbed`: If `true` (default), enables the embedding of video files.\n- `enableCheckbox`: If `true`, adds support for interactive checkboxes in content. Defaults to `false`.\n\n> [!warning]\n> Don't remove this plugin if you're using [[Obsidian compatibility|Obsidian]] to author the content!\n\n## API\n\n- Category: Transformer\n- Function name: `Plugin.ObsidianFlavoredMarkdown()`.\n- Source: [`quartz/plugins/transformers/toc.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/transformers/toc.ts).\n"
  },
  "plugins/OxHugoFlavoredMarkdown": {
    "title": "OxHugoFlavoredMarkdown",
    "content": "---\nslug: OxHugoFlavoredMarkdown\ntitle: OxHugoFlavoredMarkdown\ntags:\n  - plugin/transformer\n---\n\nThis plugin provides support for [ox-hugo](https://github.com/kaushalmodi/ox-hugo) compatibility. See [[OxHugo compatibility]] for more information.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin accepts the following configuration options:\n\n- `wikilinks`: If `true` (default), converts Hugo `{{ relref }}` shortcodes to Quartz [[wikilinks]].\n- `removePredefinedAnchor`: If `true` (default), strips predefined anchors from headings.\n- `removeHugoShortcode`: If `true` (default), removes Hugo shortcode syntax (`{{}}`) from the content.\n- `replaceFigureWithMdImg`: If `true` (default), replaces `<figure/>` with `![]()`.\n- `replaceOrgLatex`: If `true` (default), converts Org-mode [[features/Latex|Latex]] fragments to Quartz-compatible LaTeX wrapped in `$` (for inline) and `$$` (for block equations).\n\n> [!warning]\n> While you can use this together with [[ObsidianFlavoredMarkdown]], it's not recommended because it might mutate the file in unexpected ways. Use with caution.\n>\n> If you use `toml` frontmatter, make sure to configure the [[Frontmatter]] plugin accordingly. See [[OxHugo compatibility]] for an example.\n\n## API\n\n- Category: Transformer\n- Function name: `Plugin.OxHugoFlavoredMarkdown()`.\n- Source: [`quartz/plugins/transformers/oxhugofm.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/transformers/oxhugofm.ts).\n"
  },
  "plugins/RemoveDrafts": {
    "title": "RemoveDrafts",
    "content": "---\nslug: RemoveDrafts\ntitle: RemoveDrafts\ntags:\n  - plugin/filter\n---\n\nThis plugin filters out content from your vault, so that only finalized content is made available. This prevents [[private pages]] from being published. By default, it filters out all pages with `draft: true` in the frontmatter and leaves all other pages intact.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin has no configuration options.\n\n## API\n\n- Category: Filter\n- Function name: `Plugin.RemoveDrafts()`.\n- Source: [`quartz/plugins/filters/draft.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/filters/draft.ts).\n"
  },
  "plugins/Static": {
    "title": "Static",
    "content": "---\nslug: Static\ntitle: Static\ntags:\n  - plugin/emitter\n---\n\nThis plugin emits all static resources needed by Quartz. This is used, for example, for fonts and images that need a stable position, such as banners and icons. The plugin respects the `ignorePatterns` in the global [[configuration]].\n\n> [!important]\n> This is different from [[Assets]]. The resources from the [[Static]] plugin are located under `quartz/static`, whereas [[Assets]] renders all static resources under `content` and is used for images, videos, audio, etc. that are directly referenced by your markdown content.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin has no configuration options.\n\n## API\n\n- Category: Emitter\n- Function name: `Plugin.Static()`.\n- Source: [`quartz/plugins/emitters/static.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/emitters/static.ts).\n"
  },
  "plugins/SyntaxHighlighting": {
    "title": "SyntaxHighlighting",
    "content": "---\nslug: SyntaxHighlighting\ntitle: \"SyntaxHighlighting\"\ntags:\n  - plugin/transformer\n---\n\nThis plugin is used to add syntax highlighting to code blocks in Quartz. See [[syntax highlighting]] for more information.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin accepts the following configuration options:\n\n- `theme`: a separate id of one of the [themes bundled with Shikiji](https://shikiji.netlify.app/themes). One for light mode and one for dark mode. Defaults to `theme: { light: \"github-light\", dark: \"github-dark\" }`.\n- `keepBackground`: If set to `true`, the background of the Shikiji theme will be used. With `false` (default) the Quartz theme color for background will be used instead.\n\nIn addition, you can further override the colours in the `quartz/styles/syntax.scss` file.\n\n## API\n\n- Category: Transformer\n- Function name: `Plugin.SyntaxHighlighting()`.\n- Source: [`quartz/plugins/transformers/syntax.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/transformers/syntax.ts).\n"
  },
  "plugins/TableOfContents": {
    "title": "TableOfContents",
    "content": "---\nslug: TableOfContents\ntitle: TableOfContents\ntags:\n  - plugin/transformer\n---\n\nThis plugin generates a table of contents (TOC) for Markdown documents. See [[table of contents]] for more information.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin accepts the following configuration options:\n\n- `maxDepth`: Limits the depth of headings included in the TOC, ranging from `1` (top level headings only) to `6` (all heading levels). Default is `3`.\n- `minEntries`: The minimum number of heading entries required for the TOC to be displayed. Default is `1`.\n- `showByDefault`: If `true` (default), the TOC should be displayed by default. Can be overridden by frontmatter settings.\n- `collapseByDefault`: If `true`, the TOC will start in a collapsed state. Default is `false`.\n\n> [!warning]\n> This plugin needs the `Component.TableOfContents` component in `quartz.layout.ts` to determine where to display the TOC. Without it, nothing will be displayed. They should always be added or removed together.\n\n## API\n\n- Category: Transformer\n- Function name: `Plugin.TableOfContents()`.\n- Source: [`quartz/plugins/transformers/toc.ts`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/transformers/toc.ts).\n"
  },
  "plugins/TagPage": {
    "title": "TagPage",
    "content": "---\nslug: TagPage\ntitle: TagPage\ntags:\n  - plugin/emitter\n---\n\nThis plugin emits dedicated pages for each tag used in the content. See [[folder and tag listings]] for more information.\n\n> [!note]\n> For information on how to add, remove or configure plugins, see the [[configuration#Plugins|Configuration]] page.\n\nThis plugin has no configuration options.\n\nThe pages are displayed using the `defaultListPageLayout` in `quartz.layouts.ts`. For the content, the `TagContent` component is used. If you want to modify the layout, you must edit it directly (`quartz/components/pages/TagContent.tsx`).\n\n## API\n\n- Category: Emitter\n- Function name: `Plugin.TagPage()`.\n- Source: [`quartz/plugins/emitters/tagPage.tsx`](https://github.com/jackyzha0/quartz/blob/v4/quartz/plugins/emitters/tagPage.tsx).\n"
  },
  "plugins/index": {
    "title": "index",
    "content": "---\nslug: index\ntitle: Plugins\n---\n"
  },
  "setting-up-your-GitHub-repository": {
    "title": "setting up your GitHub repository",
    "content": "---\nslug: setting-up-your-GitHub-repository\ntitle: Setting up your GitHub repository\n---\n\nFirst, make sure you have Quartz [[index#🪴 Get Started|cloned and setup locally]].\n\nThen, create a new repository on GitHub.com. Do **not** initialize the new repository with `README`, license, or `gitignore` files.\n\n![[github-init-repo-options.png]]\n\nAt the top of your repository on GitHub.com's Quick Setup page, click the clipboard to copy the remote repository URL.\n\n![[github-quick-setup.png]]\n\nIn your terminal of choice, navigate to the root of your Quartz folder. Then, run the following commands, replacing `REMOTE-URL` with the URL you just copied from the previous step.\n\n```bash\n# list all the repositories that are tracked\ngit remote -v\n\n# if the origin doesn't match your own repository, set your repository as the origin\ngit remote set-url origin REMOTE-URL\n\n# if you don't have upstream as a remote, add it so updates work\ngit remote add upstream https://github.com/jackyzha0/quartz.git\n```\n\nThen, you can sync the content to upload it to your repository. This is a helper command that will do the initial push of your content to your repository.\n\n```bash\nnpx quartz sync --no-pull\n```\n\n> [!warning]- `fatal: --[no-]autostash option is only valid with --rebase`\n> You may have an outdated version of `git`. Updating `git` should fix this issue.\n\nIn future updates, you can simply run `npx quartz sync` every time you want to push updates to your repository.\n\n> [!hint] Flags and options\n> For full help options, you can run `npx quartz sync --help`.\n>\n> Most of these have sensible defaults but you can override them if you have a custom setup:\n>\n> - `-d` or `--directory`: the content folder. This is normally just `content`\n> - `-v` or `--verbose`: print out extra logging information\n> - `--commit` or `--no-commit`: whether to make a `git` commit for your changes\n> - `--push` or `--no-push`: whether to push updates to your GitHub fork of Quartz\n> - `--pull` or `--no-pull`: whether to try and pull in any updates from your GitHub fork (i.e. from other devices) before pushing\n"
  },
  "showcase": {
    "title": "showcase",
    "content": "---\nslug: showcase\ntitle: \"Quartz Showcase\"\n---\n\nWant to see what Quartz can do? Here are some cool community gardens:\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://jzhao.xyz/)\n- [Socratica Toolbox](https://toolbox.socratica.info/)\n- [oldwinter の数字花园](https://garden.oldwinter.top/)\n- [Aaron Pham's Garden](https://aarnphm.xyz/)\n- [The Quantum Garden](https://quantumgardener.blog/)\n- [Abhijeet's Math Wiki](https://abhmul.github.io/quartz/Math-Wiki/)\n- [Matt Dunn's Second Brain](https://mattdunn.info/)\n- [Pelayo Arbues' Notes](https://pelayoarbues.github.io/)\n- [Vince Imbat's Talahardin](https://vinceimbat.com/)\n- [🧠🌳 Chad's Mind Garden](https://www.chadly.net/)\n- [Pedro MC Fernandes's Topo da Mente](https://www.pmcf.xyz/topo-da-mente/)\n- [Mau Camargo's Notkesto](https://notes.camargomau.com/)\n- [Caicai's Novels](https://imoko.cc/blog/caicai/)\n- [🌊 Collapsed Wave](https://collapsedwave.com/)\n- [Sideny's 3D Artist's Handbook](https://sidney-eliot.github.io/3d-artists-handbook/)\n- [Mike's AI Garden 🤖🪴](https://mwalton.me/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Scaling Synthesis - A hypertext research notebook](https://scalingsynthesis.com/)\n- [Data Dictionary 🧠](https://glossary.airbyte.com/)\n- [sspaeti.com's Second Brain](https://brain.sspaeti.com/)\n- [🪴Aster's notebook](https://notes.asterhu.com)\n- [🥷🏻🌳🍃 Computer Science & Thinkering Garden](https://notes.yxy.ninja)\n- [A Pattern Language - Christopher Alexander (Architecture)](https://patternlanguage.cc/)\n- [Gatekeeper Wiki](https://www.gatekeeper.wiki)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/v4/docs/showcase.md)!\n"
  },
  "tags/component": {
    "title": "component",
    "content": "---\nslug: component\ntitle: Components\n---\n\nWant to create your own custom component? Check out the advanced guide on [[creating components]] for more information.\n"
  },
  "tags/plugin": {
    "title": "plugin",
    "content": "---\nslug: plugin\ntitle: Plugins\n---\n"
  },
  "upgrading": {
    "title": "upgrading",
    "content": "---\nslug: upgrading\ntitle: \"Upgrading Quartz\"\n---\n\n> [!note]\n> This is specifically a guide for upgrading Quartz 4 version to a more recent update. If you are coming from Quartz 3, check out the [[migrating from Quartz 3|migration guide]] for more info.\n\nTo fetch the latest Quartz updates, simply run\n\n```bash\nnpx quartz update\n```\n\nAs Quartz uses [git](https://git-scm.com/) under the hood for versioning, updating effectively 'pulls' in the updates from the official Quartz GitHub repository. If you have local changes that might conflict with the updates, you may need to resolve these manually yourself (or, pull manually using `git pull origin upstream`).\n\n> [!hint]\n> Quartz will try to cache your content before updating to try and prevent merge conflicts. If you get a conflict mid-merge, you can stop the merge and then run `npx quartz restore` to restore your content from the cache.\n\nIf you have the [GitHub desktop app](https://desktop.github.com/), this will automatically open to help you resolve the conflicts. Otherwise, you will need to resolve this in a text editor like VSCode. For more help on resolving conflicts manually, check out the [GitHub guide on resolving merge conflicts](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-using-the-command-line#competing-line-change-merge-conflicts).\n"
  }
}