{
  "hi": {
    "title": "hi",
    "content": "---\r\nslug: hi\r\n---\r\n# yo hi\r\n\r\nhelo im bob\r\n[yeah](https://github.com/anaclumos/linkflags)\r\n\r\n[[React & Next.js 겨우 마스터하기/2탄]]\r\n\r\n  \r\n\r\n# Markdown: Syntax\r\n\r\n*   [Overview](#overview)\r\n    *   [Philosophy](#philosophy)\r\n    *   [Inline HTML](#html)\r\n    *   [Automatic Escaping for Special Characters](#autoescape)\r\n*   [Block Elements](#block)\r\n    *   [Paragraphs and Line Breaks](#p)\r\n    *   [Headers](#header)\r\n    *   [Blockquotes](#blockquote)\r\n    *   [Lists](#list)\r\n    *   [Code Blocks](#precode)\r\n    *   [Horizontal Rules](#hr)\r\n*   [Span Elements](#span)\r\n    *   [Links](#link)\r\n    *   [Emphasis](#em)\r\n    *   [Code](#code)\r\n    *   [Images](#img)\r\n*   [Miscellaneous](#misc)\r\n    *   [Backslash Escapes](#backslash)\r\n    *   [Automatic Links](#autolink)\r\n\r\n\r\n**Note:** This document is itself written using Markdown; you\r\ncan [see the source for it by adding '.text' to the URL](/projects/markdown/syntax.text).\r\n \r\n\r\n## Overview\r\n\r\n### Philosophy\r\n\r\nMarkdown is intended to be as easy-to-read and easy-to-write as is feasible.\r\n\r\nReadability, however, is emphasized above all else. A Markdown-formatted\r\ndocument should be publishable as-is, as plain text, without looking\r\nlike it's been marked up with tags or formatting instructions. While\r\nMarkdown's syntax has been influenced by several existing text-to-HTML\r\nfilters -- including [Setext](http://docutils.sourceforge.net/mirror/setext.html), [atx](http://www.aaronsw.com/2002/atx/), [Textile](http://textism.com/tools/textile/), [reStructuredText](http://docutils.sourceforge.net/rst.html),\r\n[Grutatext](http://www.triptico.com/software/grutatxt.html), and [EtText](http://ettext.taint.org/doc/) -- the single biggest source of\r\ninspiration for Markdown's syntax is the format of plain text email.\r\n\r\n## Block Elements\r\n\r\n### Paragraphs and Line Breaks\r\n\r\nA paragraph is simply one or more consecutive lines of text, separated\r\nby one or more blank lines. (A blank line is any line that looks like a\r\nblank line -- a line containing nothing but spaces or tabs is considered\r\nblank.) Normal paragraphs should not be indented with spaces or tabs.\r\n\r\nThe implication of the \"one or more consecutive lines of text\" rule is\r\nthat Markdown supports \"hard-wrapped\" text paragraphs. This differs\r\nsignificantly from most other text-to-HTML formatters (including Movable\r\nType's \"Convert Line Breaks\" option) which translate every line break\r\ncharacter in a paragraph into a `<br />` tag.\r\n\r\nWhen you *do* want to insert a `<br />` break tag using Markdown, you\r\nend a line with two or more spaces, then type return.\r\n\r\n### Headers\r\n\r\nMarkdown supports two styles of headers, [Setext] [1] and [atx] [2].\r\n\r\nOptionally, you may \"close\" atx-style headers. This is purely\r\ncosmetic -- you can use this if you think it looks better. The\r\nclosing hashes don't even need to match the number of hashes\r\nused to open the header. (The number of opening hashes\r\ndetermines the header level.)\r\n\r\n\r\n### Blockquotes\r\n\r\nMarkdown uses email-style `>` characters for blockquoting. If you're\r\nfamiliar with quoting passages of text in an email message, then you\r\nknow how to create a blockquote in Markdown. It looks best if you hard\r\nwrap the text and put a `>` before every line:\r\n\r\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\r\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\r\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\r\n> \r\n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\r\n> id sem consectetuer libero luctus adipiscing.\r\n\r\nMarkdown allows you to be lazy and only put the `>` before the first\r\nline of a hard-wrapped paragraph:\r\n\r\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\r\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\r\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\r\n\r\n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\r\nid sem consectetuer libero luctus adipiscing.\r\n\r\nBlockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\r\nadding additional levels of `>`:\r\n\r\n> This is the first level of quoting.\r\n>\r\n> > This is nested blockquote.\r\n>\r\n> Back to the first level.\r\n\r\nBlockquotes can contain other Markdown elements, including headers, lists,\r\nand code blocks:\r\n\r\n> ## This is a header.\r\n> \r\n> 1.   This is the first list item.\r\n> 2.   This is the second list item.\r\n> \r\n> Here's some example code:\r\n> \r\n>     return shell_exec(\"echo $input | $markdown_script\");\r\n\r\nAny decent text editor should make email-style quoting easy. For\r\nexample, with BBEdit, you can make a selection and choose Increase\r\nQuote Level from the Text menu.\r\n\r\n\r\n### Lists\r\n\r\nMarkdown supports ordered (numbered) and unordered (bulleted) lists.\r\n\r\nUnordered lists use asterisks, pluses, and hyphens -- interchangably\r\n-- as list markers:\r\n\r\n*   Red\r\n*   Green\r\n*   Blue\r\n\r\nis equivalent to:\r\n\r\n+   Red\r\n+   Green\r\n+   Blue\r\n\r\nand:\r\n\r\n-   Red\r\n-   Green\r\n-   Blue\r\n\r\nOrdered lists use numbers followed by periods:\r\n\r\n1.  Bird\r\n2.  McHale\r\n3.  Parish\r\n\r\nIt's important to note that the actual numbers you use to mark the\r\nlist have no effect on the HTML output Markdown produces. The HTML\r\nMarkdown produces from the above list is:\r\n\r\nIf you instead wrote the list in Markdown like this:\r\n\r\n1.  Bird\r\n1.  McHale\r\n1.  Parish\r\n\r\nor even:\r\n\r\n3. Bird\r\n1. McHale\r\n8. Parish\r\n\r\nyou'd get the exact same HTML output. The point is, if you want to,\r\nyou can use ordinal numbers in your ordered Markdown lists, so that\r\nthe numbers in your source match the numbers in your published HTML.\r\nBut if you want to be lazy, you don't have to.\r\n\r\nTo make lists look nice, you can wrap items with hanging indents:\r\n\r\n*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\r\n    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\r\n    viverra nec, fringilla in, laoreet vitae, risus.\r\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\r\n    Suspendisse id sem consectetuer libero luctus adipiscing.\r\n\r\nBut if you want to be lazy, you don't have to:\r\n\r\n*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\r\nAliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\r\nviverra nec, fringilla in, laoreet vitae, risus.\r\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\r\nSuspendisse id sem consectetuer libero luctus adipiscing.\r\n\r\nList items may consist of multiple paragraphs. Each subsequent\r\nparagraph in a list item must be indented by either 4 spaces\r\nor one tab:\r\n\r\n1.  This is a list item with two paragraphs. Lorem ipsum dolor\r\n    sit amet, consectetuer adipiscing elit. Aliquam hendrerit\r\n    mi posuere lectus.\r\n\r\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet\r\n    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\r\n    sit amet velit.\r\n\r\n2.  Suspendisse id sem consectetuer libero luctus adipiscing.\r\n\r\nIt looks nice if you indent every line of the subsequent\r\nparagraphs, but here again, Markdown will allow you to be\r\nlazy:\r\n\r\n*   This is a list item with two paragraphs.\r\n\r\n    This is the second paragraph in the list item. You're\r\nonly required to indent the first line. Lorem ipsum dolor\r\nsit amet, consectetuer adipiscing elit.\r\n\r\n*   Another item in the same list.\r\n\r\nTo put a blockquote within a list item, the blockquote's `>`\r\ndelimiters need to be indented:\r\n\r\n*   A list item with a blockquote:\r\n\r\n    > This is a blockquote\r\n    > inside a list item.\r\n\r\nTo put a code block within a list item, the code block needs\r\nto be indented *twice* -- 8 spaces or two tabs:\r\n\r\n*   A list item with a code block:\r\n\r\n        code goes here\r\n\r\n### Code Blocks\r\n\r\nPre-formatted code blocks are used for writing about programming or\r\nmarkup source code. Rather than forming normal paragraphs, the lines\r\nof a code block are interpreted literally. Markdown wraps a code block\r\nin both `<pre>` and `<code>` tags.\r\n\r\nTo produce a code block in Markdown, simply indent every line of the\r\nblock by at least 4 spaces or 1 tab.\r\n\r\nThis is a normal paragraph:\r\n\r\n    This is a code block.\r\n\r\nHere is an example of AppleScript:\r\n\r\n    tell application \"Foo\"\r\n        beep\r\n    end tell\r\n\r\nA code block continues until it reaches a line that is not indented\r\n(or the end of the article).\r\n\r\nWithin a code block, ampersands (`&`) and angle brackets (`<` and `>`)\r\nare automatically converted into HTML entities. This makes it very\r\neasy to include example HTML source code using Markdown -- just paste\r\nit and indent it, and Markdown will handle the hassle of encoding the\r\nampersands and angle brackets. For example, this:\r\n\r\n    <div class=\"footer\">\r\n        &copy; 2004 Foo Corporation\r\n    </div>\r\n\r\nRegular Markdown syntax is not processed within code blocks. E.g.,\r\nasterisks are just literal asterisks within a code block. This means\r\nit's also easy to use Markdown to write about Markdown's own syntax.\r\n\r\n```\r\ntell application \"Foo\"\r\n    beep\r\nend tell\r\n```\r\n\r\n## Span Elements\r\n\r\n### Links\r\n\r\nMarkdown supports two style of links: *inline* and *reference*.\r\n\r\nIn both styles, the link text is delimited by [square brackets].\r\n\r\nTo create an inline link, use a set of regular parentheses immediately\r\nafter the link text's closing square bracket. Inside the parentheses,\r\nput the URL where you want the link to point, along with an *optional*\r\ntitle for the link, surrounded in quotes. For example:\r\n\r\nThis is [an example](http://example.com/) inline link.\r\n\r\n[This link](http://example.net/) has no title attribute.\r\n\r\n### Emphasis\r\n\r\nMarkdown treats asterisks (`*`) and underscores (`_`) as indicators of\r\nemphasis. Text wrapped with one `*` or `_` will be wrapped with an\r\nHTML `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML\r\n`<strong>` tag. E.g., this input:\r\n\r\n*single asterisks*\r\n\r\n_single underscores_\r\n\r\n**double asterisks**\r\n\r\n__double underscores__\r\n\r\n### Code\r\n\r\nTo indicate a span of code, wrap it with backtick quotes (`` ` ``).\r\nUnlike a pre-formatted code block, a code span indicates code within a\r\nnormal paragraph. For example:\r\n\r\nUse the `printf()` function."
  },
  "index": {
    "title": "index",
    "content": "---\r\nslug: index\r\n---\r\n# Hello!\r\nI'm Jeeho. "
  },
  "Markdown-Syntax": {
    "title": "Markdown Syntax",
    "content": "---\r\nslug: Markdown-Syntax\r\n---\r\n  \r\n\r\n*   [Overview](#overview)\r\n    *   [Philosophy](#philosophy)\r\n    *   [Inline HTML](#html)\r\n    *   [Automatic Escaping for Special Characters](#autoescape)\r\n*   [Block Elements](#block)\r\n    *   [Paragraphs and Line Breaks](#p)\r\n    *   [Headers](#header)\r\n    *   [Blockquotes](#blockquote)\r\n    *   [Lists](#list)\r\n    *   [Code Blocks](#precode)\r\n    *   [Horizontal Rules](#hr)\r\n*   [Span Elements](#span)\r\n    *   [Links](#link)\r\n    *   [Emphasis](#em)\r\n    *   [Code](#code)\r\n    *   [Images](#img)\r\n*   [Miscellaneous](#misc)\r\n    *   [Backslash Escapes](#backslash)\r\n    *   [Automatic Links](#autolink)\r\n\r\n\r\n**Note:** This document is itself written using Markdown; you\r\ncan [see the source for it by adding '.text' to the URL](/projects/markdown/syntax.text).\r\n \r\n\r\n## Overview\r\n\r\n### Philosophy\r\n\r\nMarkdown is intended to be as easy-to-read and easy-to-write as is feasible.\r\n\r\nReadability, however, is emphasized above all else. A Markdown-formatted\r\ndocument should be publishable as-is, as plain text, without looking\r\nlike it's been marked up with tags or formatting instructions. While\r\nMarkdown's syntax has been influenced by several existing text-to-HTML\r\nfilters -- including [Setext](http://docutils.sourceforge.net/mirror/setext.html), [atx](http://www.aaronsw.com/2002/atx/), [Textile](http://textism.com/tools/textile/), [reStructuredText](http://docutils.sourceforge.net/rst.html),\r\n[Grutatext](http://www.triptico.com/software/grutatxt.html), and [EtText](http://ettext.taint.org/doc/) -- the single biggest source of\r\ninspiration for Markdown's syntax is the format of plain text email.\r\n\r\n## Block Elements\r\n\r\n### Paragraphs and Line Breaks\r\n\r\nA paragraph is simply one or more consecutive lines of text, separated\r\nby one or more blank lines. (A blank line is any line that looks like a\r\nblank line -- a line containing nothing but spaces or tabs is considered\r\nblank.) Normal paragraphs should not be indented with spaces or tabs.\r\n\r\nThe implication of the \"one or more consecutive lines of text\" rule is\r\nthat Markdown supports \"hard-wrapped\" text paragraphs. This differs\r\nsignificantly from most other text-to-HTML formatters (including Movable\r\nType's \"Convert Line Breaks\" option) which translate every line break\r\ncharacter in a paragraph into a `<br />` tag.\r\n\r\nWhen you *do* want to insert a `<br />` break tag using Markdown, you\r\nend a line with two or more spaces, then type return.\r\n\r\n### Headers\r\n\r\nMarkdown supports two styles of headers, [Setext] [1] and [atx] [2].\r\n\r\nOptionally, you may \"close\" atx-style headers. This is purely\r\ncosmetic -- you can use this if you think it looks better. The\r\nclosing hashes don't even need to match the number of hashes\r\nused to open the header. (The number of opening hashes\r\ndetermines the header level.)\r\n\r\n\r\n### Blockquotes\r\n\r\nMarkdown uses email-style `>` characters for blockquoting. If you're\r\nfamiliar with quoting passages of text in an email message, then you\r\nknow how to create a blockquote in Markdown. It looks best if you hard\r\nwrap the text and put a `>` before every line:\r\n\r\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\r\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\r\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\r\n> \r\n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\r\n> id sem consectetuer libero luctus adipiscing.\r\n\r\nMarkdown allows you to be lazy and only put the `>` before the first\r\nline of a hard-wrapped paragraph:\r\n\r\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\r\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\r\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\r\n\r\n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\r\nid sem consectetuer libero luctus adipiscing.\r\n\r\nBlockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\r\nadding additional levels of `>`:\r\n\r\n> This is the first level of quoting.\r\n>\r\n> > This is nested blockquote.\r\n>\r\n> Back to the first level.\r\n\r\nBlockquotes can contain other Markdown elements, including headers, lists,\r\nand code blocks:\r\n\r\n> ## This is a header.\r\n> \r\n> 1.   This is the first list item.\r\n> 2.   This is the second list item.\r\n> \r\n> Here's some example code:\r\n> \r\n>     return shell_exec(\"echo $input | $markdown_script\");\r\n\r\nAny decent text editor should make email-style quoting easy. For\r\nexample, with BBEdit, you can make a selection and choose Increase\r\nQuote Level from the Text menu.\r\n\r\n\r\n### Lists\r\n\r\nMarkdown supports ordered (numbered) and unordered (bulleted) lists.\r\n\r\nUnordered lists use asterisks, pluses, and hyphens -- interchangably\r\n-- as list markers:\r\n\r\n*   Red\r\n*   Green\r\n*   Blue\r\n\r\nis equivalent to:\r\n\r\n+   Red\r\n+   Green\r\n+   Blue\r\n\r\nand:\r\n\r\n-   Red\r\n-   Green\r\n-   Blue\r\n\r\nOrdered lists use numbers followed by periods:\r\n\r\n1.  Bird\r\n2.  McHale\r\n3.  Parish\r\n\r\nIt's important to note that the actual numbers you use to mark the\r\nlist have no effect on the HTML output Markdown produces. The HTML\r\nMarkdown produces from the above list is:\r\n\r\nIf you instead wrote the list in Markdown like this:\r\n\r\n1.  Bird\r\n1.  McHale\r\n1.  Parish\r\n\r\nor even:\r\n\r\n3. Bird\r\n1. McHale\r\n8. Parish\r\n\r\nyou'd get the exact same HTML output. The point is, if you want to,\r\nyou can use ordinal numbers in your ordered Markdown lists, so that\r\nthe numbers in your source match the numbers in your published HTML.\r\nBut if you want to be lazy, you don't have to.\r\n\r\nTo make lists look nice, you can wrap items with hanging indents:\r\n\r\n*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\r\n    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\r\n    viverra nec, fringilla in, laoreet vitae, risus.\r\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\r\n    Suspendisse id sem consectetuer libero luctus adipiscing.\r\n\r\nBut if you want to be lazy, you don't have to:\r\n\r\n*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\r\nAliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\r\nviverra nec, fringilla in, laoreet vitae, risus.\r\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\r\nSuspendisse id sem consectetuer libero luctus adipiscing.\r\n\r\nList items may consist of multiple paragraphs. Each subsequent\r\nparagraph in a list item must be indented by either 4 spaces\r\nor one tab:\r\n\r\n1.  This is a list item with two paragraphs. Lorem ipsum dolor\r\n    sit amet, consectetuer adipiscing elit. Aliquam hendrerit\r\n    mi posuere lectus.\r\n\r\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet\r\n    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\r\n    sit amet velit.\r\n\r\n2.  Suspendisse id sem consectetuer libero luctus adipiscing.\r\n\r\nIt looks nice if you indent every line of the subsequent\r\nparagraphs, but here again, Markdown will allow you to be\r\nlazy:\r\n\r\n*   This is a list item with two paragraphs.\r\n\r\n    This is the second paragraph in the list item. You're\r\nonly required to indent the first line. Lorem ipsum dolor\r\nsit amet, consectetuer adipiscing elit.\r\n\r\n*   Another item in the same list.\r\n\r\nTo put a blockquote within a list item, the blockquote's `>`\r\ndelimiters need to be indented:\r\n\r\n*   A list item with a blockquote:\r\n\r\n    > This is a blockquote\r\n    > inside a list item.\r\n\r\nTo put a code block within a list item, the code block needs\r\nto be indented *twice* -- 8 spaces or two tabs:\r\n\r\n*   A list item with a code block:\r\n\r\n        code goes here\r\n\r\n### Code Blocks\r\n\r\nPre-formatted code blocks are used for writing about programming or\r\nmarkup source code. Rather than forming normal paragraphs, the lines\r\nof a code block are interpreted literally. Markdown wraps a code block\r\nin both `<pre>` and `<code>` tags.\r\n\r\nTo produce a code block in Markdown, simply indent every line of the\r\nblock by at least 4 spaces or 1 tab.\r\n\r\nThis is a normal paragraph:\r\n\r\n    This is a code block.\r\n\r\nHere is an example of AppleScript:\r\n\r\n    tell application \"Foo\"\r\n        beep\r\n    end tell\r\n\r\nA code block continues until it reaches a line that is not indented\r\n(or the end of the article).\r\n\r\nWithin a code block, ampersands (`&`) and angle brackets (`<` and `>`)\r\nare automatically converted into HTML entities. This makes it very\r\neasy to include example HTML source code using Markdown -- just paste\r\nit and indent it, and Markdown will handle the hassle of encoding the\r\nampersands and angle brackets. For example, this:\r\n\r\n    <div class=\"footer\">\r\n        &copy; 2004 Foo Corporation\r\n    </div>\r\n\r\nRegular Markdown syntax is not processed within code blocks. E.g.,\r\nasterisks are just literal asterisks within a code block. This means\r\nit's also easy to use Markdown to write about Markdown's own syntax.\r\n\r\n```\r\ntell application \"Foo\"\r\n    beep\r\nend tell\r\n```\r\n\r\n## Span Elements\r\n\r\n### Links\r\n\r\nMarkdown supports two style of links: *inline* and *reference*.\r\n\r\nIn both styles, the link text is delimited by [square brackets].\r\n\r\nTo create an inline link, use a set of regular parentheses immediately\r\nafter the link text's closing square bracket. Inside the parentheses,\r\nput the URL where you want the link to point, along with an *optional*\r\ntitle for the link, surrounded in quotes. For example:\r\n\r\nThis is [an example](http://example.com/) inline link.\r\n\r\n[This link](http://example.net/) has no title attribute.\r\n\r\n### Emphasis\r\n\r\nMarkdown treats asterisks (`*`) and underscores (`_`) as indicators of\r\nemphasis. Text wrapped with one `*` or `_` will be wrapped with an\r\nHTML `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML\r\n`<strong>` tag. E.g., this input:\r\n\r\n*single asterisks*\r\n\r\n_single underscores_\r\n\r\n**double asterisks**\r\n\r\n__double underscores__\r\n\r\n### Code\r\n\r\nTo indicate a span of code, wrap it with backtick quotes (`` ` ``).\r\nUnlike a pre-formatted code block, a code span indicates code within a\r\nnormal paragraph. For example:\r\n\r\nUse the `printf()` function.\r\n"
  },
  "React-&-Next.js-겨우-마스터하기/1탄": {
    "title": "1탄",
    "content": "---\r\nslug: 1탄\r\n---\r\n \r\n\r\n# 우리가 배울 것 - Next.js\r\n\r\nNext.js는 Vercel사가 개발하는 리액트 기반 프레임워크이다.\r\n\r\n\r\n일단 완전 기본부터 알아보자.\r\n\r\n## 웹페이지의 작동원리\r\n\r\n\r\n우리가 브라우저로 어떤 웹사이트에 들어갔다고 하자. 이때 우리의 브라우저와 서버는 어떤식으로 작동해 우리에게 웹페이지를 보여주는 걸까?\r\n\r\n이를 쉽게 정리하면 다음과 같다.\r\n\r\n1. 사용자의 브라우저가 서버에게 특정 URL을 요청 \r\n2. 서버는 요청을 받고 어떤 데이터를 돌려주면 될 지 생각함\r\n3. 서버가 데이터를 돌려줌\r\n4. 사용자의 컴퓨터 상의 브라우저가 이를 렌더링함\r\n\r\n\r\n이때, 서버는 데이터를 HTML의 형식으로 돌려준다.\r\n이제 먼저 HTML에 대해 알아보자. \r\n\r\n\r\n모든 웹페이지는 HTML, CSS, JS를 기반으로 작성된다. \r\n\r\nHTML은 기본적인 레이아웃을 정하고, 모든 Element(요소)를 기술한다.\r\n문법은 다음과 같다.\r\n\r\n각 `<...>`와 `<.../>`의 대응이 하나의 요소라 생각하면 되겠다. \r\n\r\n```html\r\n<!Doctype HTML>\r\n<html>\r\n\t\r\n\t<head>\r\n\t\t...\r\n\t</head>\r\n\t\r\n\t<body>\r\n\t\t...\r\n\t</body>\r\n\r\n</html>\r\n\r\n```\r\nhead 요소는 웹사이트의 제목, 크기, 등의 메타데이터를 기술한다. \r\n\r\n일단은 body 요소에 집중하자.\r\n\r\nbody 요소에는 사용자에게 보이는 모든 요소들을 기술하는 곳이라 생각하면 좋다.\r\n\r\n~~(Note. body밖에 요소를 놓는다 해도 브라우저는 이를 보여주긴 한다. 하지만 우리는 일단 정석적인 방법으로 하는게 좋으므로 그냥 body에 중요한 것들은 다 넣는다 생각하자.)~~\r\n\r\n\r\n그러면 이제 HTML의 다양한 요소에 대해 알아보도록 하자.\r\n\r\n## HTML의 다양한 요소\r\n\r\n### 1. div\r\n우리가 가장 많이 사용하게 될 요소이다. 가장 다양한 용도로 사용된다.\r\n\r\n### 2. img\r\n이미지를 표시하게 하는 요소이다. 문법은 다음과 같다.\r\n```html\r\n\t<img src=\"이미지URL\" />\t\r\n```\r\n\r\nimg는 Self closing tag라서 다른 요소들과 달리 슬래시가 앞 부분에 붙는다. 그냥 img 안에는 아무것도 넣을 수 없어서 그렇다 생각하고 넘어가자.\r\n\t\r\n### 3. button\r\n이름 그대로 버튼이다. 누르면 어떤 동작을 실행하게 할 수 있는데, 이 부분은 다음 Chapter에서 알아보기로 하자.\r\n\r\n```html\r\n\t<button onclick =\"...\">남훈이 머리 때리기</button>\r\n```\r\n\r\n### 4. anchor (a)\r\n이름을 보면 뭔지 잘 모를 수 있는데, 이는 페이지간 링크를 만드는 요소이다. 한 웹사이트 내의 페이지로 가는 것 일수도 있고, 외부 웹페이지의 링크로 가는 것 일 수도 있다.\r\n\r\n```html\r\n\t<a onclick =\"링크123\">단대소고 마이너갤러리로 가기</a>\r\n```\r\n### span\r\n인라인으로 텍스트를 보여줄 때 쓴다. 그냥 텍스트 보여주는 요소라 생각하자.\r\n\r\n\r\n\r\n참고로 저렇게 한줄에 적어도 되고,\r\n\r\n이렇게 적어도 브라우저는 잘 알아듣는다. \r\n\r\n\r\n```html\r\n\t<a onclick =\"링크123\">\r\n\t단대소고 마이너갤러리로 가기</a>\r\n```\r\n\r\n\r\n심지어 이렇게 적어도 알아듣는다. \r\n\r\n```html\r\n\t<a \r\n\tonclick =\"링크123\"\r\n\t>단대소고 마이너갤러리로 가기</\r\n\ta>\r\n```\r\n\r\n\r\n## HTML의 특징\r\n### 1. 요소를 네스팅 할 수 있다.\r\n\r\n```html\r\n\t<div>\r\n\t\t<div>남훈이바보</div>\r\n\t\t\r\n\t\t<div>\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button> \r\n\t\t\t\t\t\t남훈이 때리기\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t<div>\r\n\t\r\n```\r\n\r\n### 2. 기본적으로는 스타일링이 되어있지 않다.\r\n-> CSS로 스타일링을 하는거임\r\n\r\n### 3. HTML만으로 작성한 웹사이트는 별로 쓸모가 없다.\r\n순수한 정보제공의 목적만 달성할뿐, 사용자에게 유용한 기능을 제공하기는 어렵다. \r\n\r\n\r\n다음으로 CSS에 대해 알아보자. \r\n\r\n## CSS가 뭐에요??\r\n\r\n우리는 CSS라는 언어를 이용해서 웹사이트를 이쁘게 스타일링할 수 있다. \r\n\r\n위의 내용을 잘 읽었다면(그랬기를 바라요), 서버가 HTML의 형식으로 데이터를 브라우저에게 반환한다는 것을 기억할 것이다. \r\n\r\n그렇다면 CSS는 사용자의 브라우저에게 어떻게 전달될까?\r\n\r\n이에 대한 답은 head 요소 안에 있다.\r\n\r\n앞서 우린 head에 제목과 같은 메타데이터를 저장한다고 배웠다. \r\n\r\n이러한 메타데이터 중에는 웹사이트에 필요한 자바스크립트 파일이나 CSS파일도 포함된다. \r\n\r\n예를들어, 우리 웹사이트에 `babo.css`라는 파일이 필요하다면, \r\n\r\n```html \r\n<head>\r\n\t  \r\n\t<link rel=\"stylesheet\" href=\"babo.css\" />\r\n\r\n\t...\r\n\t\r\n</head>\r\n```\r\n\r\n같이 쓰면 된다. \r\n\r\n이러면, 브라우저가 HTML 파일을 받자 마자 CSS파일이 필요하다는 것을 알게 돼 알아서 `/babo.css` 파일도 요청해 사용한다.\r\n\r\n\r\n또한, 기본적인 스타일링은 HTML파일 상에서  `style`태그를 이용해 할 수 있다. \r\n```html\r\n<style>\r\n\r\n.large {\r\n\tfont-size: 60px;\r\n}\r\n\r\n</style>\r\n\r\n```\r\n\r\n\r\n### CSS 문법\r\n대충만 배워도 될 것 같다.\r\n\r\nCSS 문법은 인터넷에 찾아보거나 챗봇에게 물어보면 금방 알 수 있고, 많이 보다 보면 자동으로 외워진다.\r\n\r\n```css\r\n// babo.css\r\n\r\n#babo {\r\n\tfont-size: 120px;\r\n\tcolor: red;\r\n}\r\n\r\n.namhoon {\r\n\tfont-size: 60px;\r\n\tcolor: #0000FF;\r\n}\r\n\r\na {\r\n\tcolor: pink;\r\n}\r\n\r\n```\r\n\r\n```html \r\n\r\n//index.html (안중요한건생략함)\r\n<head>  \r\n\t<link rel=\"stylesheet\" href=\"babo.css\" />\r\n</head>\r\n\r\n<body>\r\n\r\n\t<span class=\"namhoon\">김남훈</span>\r\n\t<span class=\"namhoon\">김남훈</span>\r\n\t<span class=\"namhoon\">김남훈</span>\r\n\t<span class=\"namhoon\">김남훈</span>\r\n\t\r\n\t\r\n\t<div id=\"babo\">\r\n\t\t바보\r\n\t</div>\r\n\t\r\n\r\n\t<a href=\"https://m.dcinside.com/board/dksw\">\r\n\t\t단대소고마이너갤러리\r\n\t</a>\r\n\t\r\n\t\r\n\t<button>\r\n\t\t때리기\r\n\t</button>\r\n\r\n</body>\r\n```\r\n\r\n\r\n위의 CSS파일을 보면 \r\n\r\n #, .(마침표)의 기호가 사용되는 것을 볼 수 있다.\r\n \r\n눈치 빠른 분들은 # 가 id를 의미하고,\r\n .(마침표)는 class를 가리킨 다는 것을 알았을 수도 있다. \r\n\r\n그렇다면 class하고 id는 무엇이 다를까?\r\n\r\n가장 중요한 차이는 id는 웹페이지상 하나밖에 없는 요소를 가리킬 때 쓰고,  class는 여러번 사용되는 스타일을 정의할 떄 사용된다는 것에 있다. \r\n\r\n마지막의 a는 모든 anchor 요소에 적용되는 스타일을 정의한다.\r\n\r\n## 중간 정리하기\r\n\r\n\r\n오늘 많은 것을 짧은 시간안에 배웠다. 이를 복습해보기 위해 간단한 O/X 문제를 준비해봤다. \r\n\r\n1. 사용자가 웹페이지를 접속할 때, 웹 서버는 브라우저에게 HTML, CSS, JS 데이터를 동시에 반환한다. (O/X)\r\n2. CSS는 웹사이트를 스타일 할 때 사용된다. (O/X)\r\n3. class는 웹사이트상에 한번만 표시되는 요소를 가리킬 때 가장 적합하다 (O/X)\r\n\r\n여기서 보자 [[2탄|2탄으로갑시다]]\r\n\r\n[[2탄]]\r\n"
  },
  "React-&-Next.js-겨우-마스터하기/2탄": {
    "title": "2탄",
    "content": "---\r\nslug: 2탄\r\n---\r\n#webdev\r\n\r\n[[1탄]]\r\n \r\n \r\n다음으로 자바스크립트에 대해 알아보자..\r\n\r\n자바스크립트는 웹페이지가 어떻게 작동하는지를 기술하는 언어이다. \r\n\r\n기존에 파이썬이나 C언어 같은 다른 프로그래밍 언어를 알고 있다면 기본적인 문법은 별로 어색하지 않을 것 같다. \r\n\r\n한 예로 버튼을 누르면 누른 횟수를 보여주는 웹페이지를 직접 제작해보자.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n   <title>딸깍</title>\r\n</head>\r\n<body>\r\n    <button id=\"alertButton\">태일이 때리기</button>\r\n\r\n\t<span>태일이를 0번 때렀어요! </span>\r\n\r\n    <script> \r\n\t\t...\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n자바스크립트 파일은 CSS 파일과 같이 외부 파일을 로딩하게 할 수 있지만, 간단하게 하기 위해 다음과 같이 HTML파일 내부에서 `script` 태그를 사용해 정의할 수 도 있다.\r\n\r\n~~딸깍~~\r\n\r\n이제 `script` 태그 안에 자바스크립트 코드를 추가해 보자.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n   <title>딸깍</title>\r\n</head>\r\n<body>\r\n    <button id=\"alertButton\">태일이 때리기</button>\r\n    <span id=\"clickCount\">태일이를 0번 때렸어요! </span>\r\n\r\n    <script>\r\n        // 클릭 횟수를 저장하는 변수\r\n        let count = 0;\r\n\r\n        // 버튼과 span 요소를 가져오기\r\n        const button = document.getElementById('alertButton');\r\n        const clickCountText = document.getElementById('clickCount');\r\n\r\n        // 버튼 클릭 시 실행될 함수\r\n        button.addEventListener('click', () => {\r\n            // 클릭 횟수 증가\r\n            count++;\r\n            // 새로운 텍스트 설정\r\n            clickCountText.textContent = `태일이를 ${count}번 때렸어요!`;\r\n        });\r\n\r\n\t\talert('♡')\r\n\t</script>\r\n</body>\r\n</html>\r\n```\r\n\r\n위 코드를 설명해보면 다음과 같다.\r\n\r\n1. **클릭 횟수를 저장할 변수를 초기화**:\r\n   ```javascript\r\n   let count = 0;\r\n   ```\r\n\r\n2. **HTML 요소를 JavaScript에서 select하기**\r\n   - 버튼 요소를 `getElementById`를 통해 선택한다.\r\n   - 클릭 횟수를 표시할 `span` 요소를 `getElementById`를 통해 선택한다.\r\n   ```javascript\r\n   const button = document.getElementById('alertButton');\r\n   const clickCountText = document.getElementById('clickCount');\r\n   ```\r\n\r\n3. **버튼에 클릭 이벤트 리스너를 추가하기**\r\n   - 버튼이 클릭될 때마다 호출될 함수를 `addEventListener`로 설정한다.\r\n   - 이 함수는 클릭 횟수를 증가시키고, `span` 요소의 텍스트를 업데이트한다.\r\n   ```javascript\r\n   button.addEventListener('click', () => {\r\n       count++;\r\n       clickCountText.textContent = `태일이를 ${count}번 때렸어요!`;\r\n   });\r\n   ```\r\n\r\n이렇게 하면 버튼을 누를 때마다 텍스트가 업데이트되어 클릭 횟수가 반영된다.\r\n\r\n\r\n여기서, \r\n\r\n```js\r\n(a,b) => { \r\n\t...\r\n}\r\n\r\n```\r\n\r\n는 arrow function이라 부르는데, 자바스크립트에서 함수를 정의하는 방법 중 하나이다. \r\n\r\n```js \r\nfunction asdf(a,b){\r\n\t....\r\n}\r\n```\r\n\r\n물론 이런 식으로 해도 일반적인 상황에서는 큰 차이는 없다. 하지만, 이름이 없는 함수를 정의할 때 유용하게 사용되곤 한다. \r\n\r\n[[안지호의 React & Next.js 겨우 마스터하기 - 3탄]]\r\n\r\n"
  },
  "React-&-Next.js-겨우-마스터하기/3탄": {
    "title": "3탄",
    "content": "---\r\nslug: 3탄\r\n---\r\n \r\n \r\n지금까지는 HTML, CSS, JS 를 사용해 간단한 웹사이트를 제작해 보았다.\r\n\r\n하지만, 이러한 구조로 웹사이트를 제작하는 것은 간단한 프로토타입이나 작은 프로젝트에서는 괜찮을 수 있다. 그러나 실제로 대규모 웹 애플리케이션을 개발할 때는 비효율적일 수 있다.\r\n\r\n\r\n1. **코드가 드러워짐**: 이벤트 리스너를 많이 사용할수록 코드가 복잡해지고 관리가 어려워진다. 특히 대규모 애플리케이션에서는 이벤트 핸들링이 복잡해지면 버그를 찾기가 매우 어려워진다. \r\n\r\n2. **상태 관리의 어려움**: 이벤트 리스너를 통해 상태를 관리하려면 전역 변수나 DOM 요소의 속성을 사용해야 하는데, 다양한 기능이 있는 웹사이트에서는 이 관리가 매우 복잡해질 수 밖에 없다. 예를 들어, 다양한 파일에서 같은 변수를 접근하려 할때 문제가 생길 수 있는 것이다. \r\n\r\n3. **성능 문제**: 이벤트 리스너를 많이 사용하면 브라우저의 성능에 부담을 줄 수 있다는 문제도 있다. 특히 이벤트 리스너가 복잡하거나 실행 주기가 짧고 여러번 실행되는 경우에는 성능 문제가 발생할 수 있다. 자바스크립트는 기본적으로 싱글 쓰레드 언어라, 중요한 작업들이 한 쓰레드 위에서 실행되어, 하나의 작업이 끝나지 않으면 다른 작업들이 지연될 수 있다고 생각하면 좋다. \r\n\r\n\r\n이러한 문제를 해결하기 위해 우리를 위해 똑똑한 사람들이 **프론트엔드 프레임워크**들을 개발하기 시작했다. \r\n\r\nReact, Vue.js, Angular 같은 프레임워크들은 컴포넌트 기반 구조로 코드를 더 잘 구조화할 수 있게 하고, 상태 관리를 쉽게할 수 있도록 도와준다. 또한, 가상 DOM 등의 기술을 사용하여 성능을 최적화하는 경우도 많다.\r\n\r\n이러한 프레임워크를 사용하면 이벤트 리스너를 직접 작성할 필요 없이 컴포넌트 간의 통신이나 상태 관리를 더 효율적으로 할 수 있다.\r\n\r\n우리가 사용할 프런트엔드 프레임워크는 페이스북에서 개발한 React이다. React는 오픈소스로 개발되어 페이스북 뿐만 아니라, 외부 기여자들도 매우 많은 대형 프로젝트이다. \r\n\r\n다음 포스트에는 React의 기본 문법에 대해 알아보자.\r\n\r\n[[안지호의 React & Next.js 겨우 마스터하기 - 4탄]]\r\n"
  }
}